{"version":3,"file":"polygon-clipping.umd.min.js","sources":["../src/bbox.js","../src/flp.js","../src/rounder.js","../node_modules/robust-predicates/esm/util.js","../node_modules/robust-predicates/esm/orient2d.js","../src/vector.js","../src/sweep-event.js","../src/segment.js","../src/geom-in.js","../src/geom-out.js","../src/sweep-line.js","../src/operation.js","../src/index.js"],"sourcesContent":["/**\n * A bounding box has the format:\n *\n *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n *\n */\n\nexport const isInBbox = (bbox, point) => {\n  return (\n    bbox.ll.x <= point.x &&\n    point.x <= bbox.ur.x &&\n    bbox.ll.y <= point.y &&\n    point.y <= bbox.ur.y\n  )\n}\n\n/* Returns either null, or a bbox (aka an ordered pair of points)\n * If there is only one point of overlap, a bbox with identical points\n * will be returned */\nexport const getBboxOverlap = (b1, b2) => {\n  // check if the bboxes overlap at all\n  if (\n    b2.ur.x < b1.ll.x ||\n    b1.ur.x < b2.ll.x ||\n    b2.ur.y < b1.ll.y ||\n    b1.ur.y < b2.ll.y\n  )\n    return null\n\n  // find the middle two X values\n  const lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x\n  const upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x\n\n  // find the middle two Y values\n  const lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y\n  const upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y\n\n  // put those middle values together to get the overlap\n  return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } }\n}\n","/* Javascript doesn't do integer math. Everything is\n * floating point with percision Number.EPSILON.\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n */\n\nlet epsilon = Number.EPSILON\n\n// IE Polyfill\nif (epsilon === undefined) epsilon = Math.pow(2, -52)\n\nconst EPSILON_SQ = epsilon * epsilon\n\n/* FLP comparator */\nexport const cmp = (a, b) => {\n  // check if they're both 0\n  if (-epsilon < a && a < epsilon) {\n    if (-epsilon < b && b < epsilon) {\n      return 0\n    }\n  }\n\n  // check if they're flp equal\n  const ab = a - b\n  if (ab * ab < EPSILON_SQ * a * b) {\n    return 0\n  }\n\n  // normal comparison\n  return a < b ? -1 : 1\n}\n","import { cmp } from \"./flp\"\nimport SplayTree from \"splaytree\"\n\n/**\n * This class rounds incoming values sufficiently so that\n * floating points problems are, for the most part, avoided.\n *\n * Incoming points are have their x & y values tested against\n * all previously seen x & y values. If either is 'too close'\n * to a previously seen value, it's value is 'snapped' to the\n * previously seen value.\n *\n * All points should be rounded by this class before being\n * stored in any data structures in the rest of this algorithm.\n */\n\nclass PtRounder {\n  constructor() {\n    this.reset()\n  }\n\n  reset() {\n    this.xRounder = new CoordRounder()\n    this.yRounder = new CoordRounder()\n  }\n\n  round(x, y) {\n    return {\n      x: this.xRounder.round(x),\n      y: this.yRounder.round(y),\n    }\n  }\n}\n\nclass CoordRounder {\n  constructor() {\n    this.tree = new SplayTree()\n    // preseed with 0 so we don't end up with values < Number.EPSILON\n    this.round(0)\n  }\n\n  // Note: this can rounds input values backwards or forwards.\n  //       You might ask, why not restrict this to just rounding\n  //       forwards? Wouldn't that allow left endpoints to always\n  //       remain left endpoints during splitting (never change to\n  //       right). No - it wouldn't, because we snap intersections\n  //       to endpoints (to establish independence from the segment\n  //       angle for t-intersections).\n  round(coord) {\n    const node = this.tree.add(coord)\n\n    const prevNode = this.tree.prev(node)\n    if (prevNode !== null && cmp(node.key, prevNode.key) === 0) {\n      this.tree.remove(coord)\n      return prevNode.key\n    }\n\n    const nextNode = this.tree.next(node)\n    if (nextNode !== null && cmp(node.key, nextNode.key) === 0) {\n      this.tree.remove(coord)\n      return nextNode.key\n    }\n\n    return coord\n  }\n}\n\n// singleton available by import\nconst rounder = new PtRounder()\n\nexport default rounder\n","export const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon;\n\n// fast_expansion_sum_zeroelim routine from oritinal code\nexport function sum(elen, e, flen, f, h) {\n    let Q, Qnew, hh, bvirt;\n    let enow = e[0];\n    let fnow = f[0];\n    let eindex = 0;\n    let findex = 0;\n    if ((fnow > enow) === (fnow > -enow)) {\n        Q = enow;\n        enow = e[++eindex];\n    } else {\n        Q = fnow;\n        fnow = f[++findex];\n    }\n    let hindex = 0;\n    if (eindex < elen && findex < flen) {\n        if ((fnow > enow) === (fnow > -enow)) {\n            Qnew = enow + Q;\n            hh = Q - (Qnew - enow);\n            enow = e[++eindex];\n        } else {\n            Qnew = fnow + Q;\n            hh = Q - (Qnew - fnow);\n            fnow = f[++findex];\n        }\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        while (eindex < elen && findex < flen) {\n            if ((fnow > enow) === (fnow > -enow)) {\n                Qnew = Q + enow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\n                enow = e[++eindex];\n            } else {\n                Qnew = Q + fnow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n                fnow = f[++findex];\n            }\n            Q = Qnew;\n            if (hh !== 0) {\n                h[hindex++] = hh;\n            }\n        }\n    }\n    while (eindex < elen) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    while (findex < flen) {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n}\n\n// scale_expansion_zeroelim routine from oritinal code\nexport function scale(elen, e, b, h) {\n    let Q, sum, hh, product1, product0;\n    let bvirt, c, ahi, alo, bhi, blo;\n\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    let enow = e[0];\n    Q = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n    let hindex = 0;\n    if (hh !== 0) {\n        h[hindex++] = hh;\n    }\n    for (let i = 1; i < elen; i++) {\n        enow = e[i];\n        product1 = enow * b;\n        c = splitter * enow;\n        ahi = c - (c - enow);\n        alo = enow - ahi;\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n        sum = Q + product0;\n        bvirt = sum - Q;\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        Q = product1 + sum;\n        hh = sum - (Q - product1);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function negate(elen, e) {\n    for (let i = 0; i < elen; i++) e[i] = -e[i];\n    return elen;\n}\n\nexport function estimate(elen, e) {\n    let Q = e[0];\n    for (let i = 1; i < elen; i++) Q += e[i];\n    return Q;\n}\n\nexport function vec(n) {\n    return new Float64Array(n);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum} from './util.js';\n\nconst ccwerrboundA = (3 + 16 * epsilon) * epsilon;\nconst ccwerrboundB = (2 + 12 * epsilon) * epsilon;\nconst ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;\n\nconst B = vec(4);\nconst C1 = vec(8);\nconst C2 = vec(12);\nconst D = vec(16);\nconst u = vec(4);\n\nfunction orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {\n    let acxtail, acytail, bcxtail, bcytail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const acx = ax - cx;\n    const bcx = bx - cx;\n    const acy = ay - cy;\n    const bcy = by - cy;\n\n    s1 = acx * bcy;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcx;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    B[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    B[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    B[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    B[3] = u3;\n\n    let det = estimate(4, B);\n    let errbound = ccwerrboundB * detsum;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - acx;\n    acxtail = ax - (acx + bvirt) + (bvirt - cx);\n    bvirt = bx - bcx;\n    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);\n    bvirt = ay - acy;\n    acytail = ay - (acy + bvirt) + (bvirt - cy);\n    bvirt = by - bcy;\n    bcytail = by - (bcy + bvirt) + (bvirt - cy);\n\n    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {\n        return det;\n    }\n\n    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);\n    det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);\n    if (det >= errbound || -det >= errbound) return det;\n\n    s1 = acxtail * bcy;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcx;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C1len = sum(4, B, 4, u, C1);\n\n    s1 = acx * bcytail;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcxtail;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C2len = sum(C1len, C1, 4, u, C2);\n\n    s1 = acxtail * bcytail;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcxtail;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const Dlen = sum(C2len, C2, 4, u, D);\n\n    return D[Dlen - 1];\n}\n\nexport function orient2d(ax, ay, bx, by, cx, cy) {\n    const detleft = (ay - cy) * (bx - cx);\n    const detright = (ax - cx) * (by - cy);\n    const det = detleft - detright;\n\n    if (detleft === 0 || detright === 0 || (detleft > 0) !== (detright > 0)) return det;\n\n    const detsum = Math.abs(detleft + detright);\n    if (Math.abs(det) >= ccwerrboundA * detsum) return det;\n\n    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);\n}\n\nexport function orient2dfast(ax, ay, bx, by, cx, cy) {\n    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);\n}\n","import { orient2d } from \"robust-predicates\"\n\n/* Cross Product of two vectors with first point at origin */\nexport const crossProduct = (a, b) => a.x * b.y - a.y * b.x\n\n/* Dot Product of two vectors with first point at origin */\nexport const dotProduct = (a, b) => a.x * b.x + a.y * b.y\n\n/* Comparator for two vectors with same starting point */\nexport const compareVectorAngles = (basePt, endPt1, endPt2) => {\n  const res = orient2d(\n    basePt.x,\n    basePt.y,\n    endPt1.x,\n    endPt1.y,\n    endPt2.x,\n    endPt2.y,\n  )\n  if (res > 0) return -1\n  if (res < 0) return 1\n  return 0\n}\n\nexport const length = (v) => Math.sqrt(dotProduct(v, v))\n\n/* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const sineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\n  return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase)\n}\n\n/* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const cosineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\n  return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase)\n}\n\n/* Get the closest point on an line (defined by two points)\n * to another point. */\nexport const closestPoint = (ptA1, ptA2, ptB) => {\n  if (ptA1.x === ptA2.x) return { x: ptA1.x, y: ptB.y } // vertical vector\n  if (ptA1.y === ptA2.y) return { x: ptB.x, y: ptA1.y } // horizontal vector\n\n  // determinne which point is further away\n  // we use the further point as our base in the calculation, so that the\n  // vectors are more parallel, providing more accurate dot product\n  const v1 = { x: ptB.x - ptA1.x, y: ptB.y - ptA1.y }\n  const v2 = { x: ptB.x - ptA2.x, y: ptB.y - ptA2.y }\n  let vFar, vA, farPt\n  if (dotProduct(v1, v1) > dotProduct(v2, v2)) {\n    vFar = v1\n    vA = { x: ptA2.x - ptA1.x, y: ptA2.y - ptA1.y }\n    farPt = ptA1\n  } else {\n    vFar = v2\n    vA = { x: ptA1.x - ptA2.x, y: ptA1.y - ptA2.y }\n    farPt = ptA2\n  }\n\n  // manually test if the current point can be considered to be on the line\n  // If the X coordinate was on the line, would the Y coordinate be as well?\n  const xDist = (ptB.x - farPt.x) / vA.x\n  if (ptB.y === farPt.y + xDist * vA.y) return ptB\n\n  // If the Y coordinate was on the line, would the X coordinate be as well?\n  const yDist = (ptB.y - farPt.y) / vA.y\n  if (ptB.x === farPt.x + yDist * vA.x) return ptB\n\n  // current point isn't exactly on line, so return closest point\n  const dist = dotProduct(vA, vFar) / dotProduct(vA, vA)\n  return { x: farPt.x + dist * vA.x, y: farPt.y + dist * vA.y }\n}\n\n/* Get the x coordinate where the given line (defined by a point and vector)\n * crosses the horizontal line with the given y coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const horizontalIntersection = (pt, v, y) => {\n  if (v.y === 0) return null\n  return { x: pt.x + (v.x / v.y) * (y - pt.y), y: y }\n}\n\n/* Get the y coordinate where the given line (defined by a point and vector)\n * crosses the vertical line with the given x coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const verticalIntersection = (pt, v, x) => {\n  if (v.x === 0) return null\n  return { x: x, y: pt.y + (v.y / v.x) * (x - pt.x) }\n}\n\n/* Get the intersection of two lines, each defined by a base point and a vector.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const intersection = (pt1, v1, pt2, v2) => {\n  // take some shortcuts for vertical and horizontal lines\n  // this also ensures we don't calculate an intersection and then discover\n  // it's actually outside the bounding box of the line\n  if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x)\n  if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x)\n  if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y)\n  if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y)\n\n  // General case for non-overlapping segments.\n  // This algorithm is based on Schneider and Eberly.\n  // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n\n  const kross = crossProduct(v1, v2)\n  if (kross == 0) return null\n\n  const ve = { x: pt2.x - pt1.x, y: pt2.y - pt1.y }\n  const d1 = crossProduct(ve, v1) / kross\n  const d2 = crossProduct(ve, v2) / kross\n\n  // take the average of the two calculations to minimize rounding error\n  const x1 = pt1.x + d2 * v1.x,\n    x2 = pt2.x + d1 * v2.x\n  const y1 = pt1.y + d2 * v1.y,\n    y2 = pt2.y + d1 * v2.y\n  const x = (x1 + x2) / 2\n  const y = (y1 + y2) / 2\n  return { x: x, y: y }\n}\n\n/* Given a vector, return one that is perpendicular */\nexport const perpendicular = (v) => {\n  return { x: -v.y, y: v.x }\n}\n","import Segment from \"./segment\"\nimport { cosineOfAngle, sineOfAngle } from \"./vector\"\n\nexport default class SweepEvent {\n  // for ordering sweep events in the sweep event queue\n  static compare(a, b) {\n    // favor event with a point that the sweep line hits first\n    const ptCmp = SweepEvent.comparePoints(a.point, b.point)\n    if (ptCmp !== 0) return ptCmp\n\n    // the points are the same, so link them if needed\n    if (a.point !== b.point) a.link(b)\n\n    // favor right events over left\n    if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1\n\n    // we have two matching left or right endpoints\n    // ordering of this case is the same as for their segments\n    return Segment.compare(a.segment, b.segment)\n  }\n\n  // for ordering points in sweep line order\n  static comparePoints(aPt, bPt) {\n    if (aPt.x < bPt.x) return -1\n    if (aPt.x > bPt.x) return 1\n\n    if (aPt.y < bPt.y) return -1\n    if (aPt.y > bPt.y) return 1\n\n    return 0\n  }\n\n  // Warning: 'point' input will be modified and re-used (for performance)\n  constructor(point, isLeft) {\n    if (point.events === undefined) point.events = [this]\n    else point.events.push(this)\n    this.point = point\n    this.isLeft = isLeft\n    // this.segment, this.otherSE set by factory\n  }\n\n  link(other) {\n    if (other.point === this.point) {\n      throw new Error(\"Tried to link already linked events\")\n    }\n    const otherEvents = other.point.events\n    for (let i = 0, iMax = otherEvents.length; i < iMax; i++) {\n      const evt = otherEvents[i]\n      this.point.events.push(evt)\n      evt.point = this.point\n    }\n    this.checkForConsuming()\n  }\n\n  /* Do a pass over our linked events and check to see if any pair\n   * of segments match, and should be consumed. */\n  checkForConsuming() {\n    // FIXME: The loops in this method run O(n^2) => no good.\n    //        Maintain little ordered sweep event trees?\n    //        Can we maintaining an ordering that avoids the need\n    //        for the re-sorting with getLeftmostComparator in geom-out?\n\n    // Compare each pair of events to see if other events also match\n    const numEvents = this.point.events.length\n    for (let i = 0; i < numEvents; i++) {\n      const evt1 = this.point.events[i]\n      if (evt1.segment.consumedBy !== undefined) continue\n      for (let j = i + 1; j < numEvents; j++) {\n        const evt2 = this.point.events[j]\n        if (evt2.consumedBy !== undefined) continue\n        if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue\n        evt1.segment.consume(evt2.segment)\n      }\n    }\n  }\n\n  getAvailableLinkedEvents() {\n    // point.events is always of length 2 or greater\n    const events = []\n    for (let i = 0, iMax = this.point.events.length; i < iMax; i++) {\n      const evt = this.point.events[i]\n      if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n        events.push(evt)\n      }\n    }\n    return events\n  }\n\n  /**\n   * Returns a comparator function for sorting linked events that will\n   * favor the event that will give us the smallest left-side angle.\n   * All ring construction starts as low as possible heading to the right,\n   * so by always turning left as sharp as possible we'll get polygons\n   * without uncessary loops & holes.\n   *\n   * The comparator function has a compute cache such that it avoids\n   * re-computing already-computed values.\n   */\n  getLeftmostComparator(baseEvent) {\n    const cache = new Map()\n\n    const fillCache = (linkedEvent) => {\n      const nextEvent = linkedEvent.otherSE\n      cache.set(linkedEvent, {\n        sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),\n        cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point),\n      })\n    }\n\n    return (a, b) => {\n      if (!cache.has(a)) fillCache(a)\n      if (!cache.has(b)) fillCache(b)\n\n      const { sine: asine, cosine: acosine } = cache.get(a)\n      const { sine: bsine, cosine: bcosine } = cache.get(b)\n\n      // both on or above x-axis\n      if (asine >= 0 && bsine >= 0) {\n        if (acosine < bcosine) return 1\n        if (acosine > bcosine) return -1\n        return 0\n      }\n\n      // both below x-axis\n      if (asine < 0 && bsine < 0) {\n        if (acosine < bcosine) return -1\n        if (acosine > bcosine) return 1\n        return 0\n      }\n\n      // one above x-axis, one below\n      if (bsine < asine) return -1\n      if (bsine > asine) return 1\n      return 0\n    }\n  }\n}\n","import operation from \"./operation\"\nimport SweepEvent from \"./sweep-event\"\nimport { isInBbox, getBboxOverlap } from \"./bbox\"\nimport { intersection } from \"./vector\"\nimport rounder from \"./rounder\"\n\n// Give segments unique ID's to get consistent sorting of\n// segments and sweep events when all else is identical\nlet segmentId = 0\n\nexport default class Segment {\n  /* This compare() function is for ordering segments in the sweep\n   * line tree, and does so according to the following criteria:\n   *\n   * Consider the vertical line that lies an infinestimal step to the\n   * right of the right-more of the two left endpoints of the input\n   * segments. Imagine slowly moving a point up from negative infinity\n   * in the increasing y direction. Which of the two segments will that\n   * point intersect first? That segment comes 'before' the other one.\n   *\n   * If neither segment would be intersected by such a line, (if one\n   * or more of the segments are vertical) then the line to be considered\n   * is directly on the right-more of the two left inputs.\n   */\n  static compare(a, b) {\n    const alx = a.leftSE.point.x\n    const blx = b.leftSE.point.x\n    const arx = a.rightSE.point.x\n    const brx = b.rightSE.point.x\n\n    // check if they're even in the same vertical plane\n    if (brx < alx) return 1\n    if (arx < blx) return -1\n\n    const aly = a.leftSE.point.y\n    const bly = b.leftSE.point.y\n    const ary = a.rightSE.point.y\n    const bry = b.rightSE.point.y\n\n    // is left endpoint of segment B the right-more?\n    if (alx < blx) {\n      // are the two segments in the same horizontal plane?\n      if (bly < aly && bly < ary) return 1\n      if (bly > aly && bly > ary) return -1\n\n      // is the B left endpoint colinear to segment A?\n      const aCmpBLeft = a.comparePoint(b.leftSE.point)\n      if (aCmpBLeft < 0) return 1\n      if (aCmpBLeft > 0) return -1\n\n      // is the A right endpoint colinear to segment B ?\n      const bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return -1\n    }\n\n    // is left endpoint of segment A the right-more?\n    if (alx > blx) {\n      if (aly < bly && aly < bry) return -1\n      if (aly > bly && aly > bry) return 1\n\n      // is the A left endpoint colinear to segment B?\n      const bCmpALeft = b.comparePoint(a.leftSE.point)\n      if (bCmpALeft !== 0) return bCmpALeft\n\n      // is the B right endpoint colinear to segment A?\n      const aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight < 0) return 1\n      if (aCmpBRight > 0) return -1\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return 1\n    }\n\n    // if we get here, the two left endpoints are in the same\n    // vertical plane, ie alx === blx\n\n    // consider the lower left-endpoint to come first\n    if (aly < bly) return -1\n    if (aly > bly) return 1\n\n    // left endpoints are identical\n    // check for colinearity by using the left-more right endpoint\n\n    // is the A right endpoint more left-more?\n    if (arx < brx) {\n      const bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n    }\n\n    // is the B right endpoint more left-more?\n    if (arx > brx) {\n      const aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight < 0) return 1\n      if (aCmpBRight > 0) return -1\n    }\n\n    if (arx !== brx) {\n      // are these two [almost] vertical segments with opposite orientation?\n      // if so, the one with the lower right endpoint comes first\n      const ay = ary - aly\n      const ax = arx - alx\n      const by = bry - bly\n      const bx = brx - blx\n      if (ay > ax && by < bx) return 1\n      if (ay < ax && by > bx) return -1\n    }\n\n    // we have colinear segments with matching orientation\n    // consider the one with more left-more right endpoint to be first\n    if (arx > brx) return 1\n    if (arx < brx) return -1\n\n    // if we get here, two two right endpoints are in the same\n    // vertical plane, ie arx === brx\n\n    // consider the lower right-endpoint to come first\n    if (ary < bry) return -1\n    if (ary > bry) return 1\n\n    // right endpoints identical as well, so the segments are idential\n    // fall back on creation order as consistent tie-breaker\n    if (a.id < b.id) return -1\n    if (a.id > b.id) return 1\n\n    // identical segment, ie a === b\n    return 0\n  }\n\n  /* Warning: a reference to ringWindings input will be stored,\n   *  and possibly will be later modified */\n  constructor(leftSE, rightSE, rings, windings) {\n    this.id = ++segmentId\n    this.leftSE = leftSE\n    leftSE.segment = this\n    leftSE.otherSE = rightSE\n    this.rightSE = rightSE\n    rightSE.segment = this\n    rightSE.otherSE = leftSE\n    this.rings = rings\n    this.windings = windings\n    // left unset for performance, set later in algorithm\n    // this.ringOut, this.consumedBy, this.prev\n  }\n\n  static fromRing(pt1, pt2, ring) {\n    let leftPt, rightPt, winding\n\n    // ordering the two points according to sweep line ordering\n    const cmpPts = SweepEvent.comparePoints(pt1, pt2)\n    if (cmpPts < 0) {\n      leftPt = pt1\n      rightPt = pt2\n      winding = 1\n    } else if (cmpPts > 0) {\n      leftPt = pt2\n      rightPt = pt1\n      winding = -1\n    } else\n      throw new Error(\n        `Tried to create degenerate segment at [${pt1.x}, ${pt1.y}]`,\n      )\n\n    const leftSE = new SweepEvent(leftPt, true)\n    const rightSE = new SweepEvent(rightPt, false)\n    return new Segment(leftSE, rightSE, [ring], [winding])\n  }\n\n  /* When a segment is split, the rightSE is replaced with a new sweep event */\n  replaceRightSE(newRightSE) {\n    this.rightSE = newRightSE\n    this.rightSE.segment = this\n    this.rightSE.otherSE = this.leftSE\n    this.leftSE.otherSE = this.rightSE\n  }\n\n  bbox() {\n    const y1 = this.leftSE.point.y\n    const y2 = this.rightSE.point.y\n    return {\n      ll: { x: this.leftSE.point.x, y: y1 < y2 ? y1 : y2 },\n      ur: { x: this.rightSE.point.x, y: y1 > y2 ? y1 : y2 },\n    }\n  }\n\n  /* A vector from the left point to the right */\n  vector() {\n    return {\n      x: this.rightSE.point.x - this.leftSE.point.x,\n      y: this.rightSE.point.y - this.leftSE.point.y,\n    }\n  }\n\n  isAnEndpoint(pt) {\n    return (\n      (pt.x === this.leftSE.point.x && pt.y === this.leftSE.point.y) ||\n      (pt.x === this.rightSE.point.x && pt.y === this.rightSE.point.y)\n    )\n  }\n\n  /* Compare this segment with a point.\n   *\n   * A point P is considered to be colinear to a segment if there\n   * exists a distance D such that if we travel along the segment\n   * from one * endpoint towards the other a distance D, we find\n   * ourselves at point P.\n   *\n   * Return value indicates:\n   *\n   *   1: point lies above the segment (to the left of vertical)\n   *   0: point is colinear to segment\n   *  -1: point lies below the segment (to the right of vertical)\n   */\n  comparePoint(point) {\n    if (this.isAnEndpoint(point)) return 0\n\n    const lPt = this.leftSE.point\n    const rPt = this.rightSE.point\n    const v = this.vector()\n\n    // Exactly vertical segments.\n    if (lPt.x === rPt.x) {\n      if (point.x === lPt.x) return 0\n      return point.x < lPt.x ? 1 : -1\n    }\n\n    // Nearly vertical segments with an intersection.\n    // Check to see where a point on the line with matching Y coordinate is.\n    const yDist = (point.y - lPt.y) / v.y\n    const xFromYDist = lPt.x + yDist * v.x\n    if (point.x === xFromYDist) return 0\n\n    // General case.\n    // Check to see where a point on the line with matching X coordinate is.\n    const xDist = (point.x - lPt.x) / v.x\n    const yFromXDist = lPt.y + xDist * v.y\n    if (point.y === yFromXDist) return 0\n    return point.y < yFromXDist ? -1 : 1\n  }\n\n  /**\n   * Given another segment, returns the first non-trivial intersection\n   * between the two segments (in terms of sweep line ordering), if it exists.\n   *\n   * A 'non-trivial' intersection is one that will cause one or both of the\n   * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n   *\n   *   * endpoint of segA with endpoint of segB --> trivial\n   *   * endpoint of segA with point along segB --> non-trivial\n   *   * endpoint of segB with point along segA --> non-trivial\n   *   * point along segA with point along segB --> non-trivial\n   *\n   * If no non-trivial intersection exists, return null\n   * Else, return null.\n   */\n  getIntersection(other) {\n    // If bboxes don't overlap, there can't be any intersections\n    const tBbox = this.bbox()\n    const oBbox = other.bbox()\n    const bboxOverlap = getBboxOverlap(tBbox, oBbox)\n    if (bboxOverlap === null) return null\n\n    // We first check to see if the endpoints can be considered intersections.\n    // This will 'snap' intersections to endpoints if possible, and will\n    // handle cases of colinearity.\n\n    const tlp = this.leftSE.point\n    const trp = this.rightSE.point\n    const olp = other.leftSE.point\n    const orp = other.rightSE.point\n\n    // does each endpoint touch the other segment?\n    // note that we restrict the 'touching' definition to only allow segments\n    // to touch endpoints that lie forward from where we are in the sweep line pass\n    const touchesOtherLSE = isInBbox(tBbox, olp) && this.comparePoint(olp) === 0\n    const touchesThisLSE = isInBbox(oBbox, tlp) && other.comparePoint(tlp) === 0\n    const touchesOtherRSE = isInBbox(tBbox, orp) && this.comparePoint(orp) === 0\n    const touchesThisRSE = isInBbox(oBbox, trp) && other.comparePoint(trp) === 0\n\n    // do left endpoints match?\n    if (touchesThisLSE && touchesOtherLSE) {\n      // these two cases are for colinear segments with matching left\n      // endpoints, and one segment being longer than the other\n      if (touchesThisRSE && !touchesOtherRSE) return trp\n      if (!touchesThisRSE && touchesOtherRSE) return orp\n      // either the two segments match exactly (two trival intersections)\n      // or just on their left endpoint (one trivial intersection\n      return null\n    }\n\n    // does this left endpoint matches (other doesn't)\n    if (touchesThisLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesOtherRSE) {\n        if (tlp.x === orp.x && tlp.y === orp.y) return null\n      }\n      // t-intersection on left endpoint\n      return tlp\n    }\n\n    // does other left endpoint matches (this doesn't)\n    if (touchesOtherLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesThisRSE) {\n        if (trp.x === olp.x && trp.y === olp.y) return null\n      }\n      // t-intersection on left endpoint\n      return olp\n    }\n\n    // trivial intersection on right endpoints\n    if (touchesThisRSE && touchesOtherRSE) return null\n\n    // t-intersections on just one right endpoint\n    if (touchesThisRSE) return trp\n    if (touchesOtherRSE) return orp\n\n    // None of our endpoints intersect. Look for a general intersection between\n    // infinite lines laid over the segments\n    const pt = intersection(tlp, this.vector(), olp, other.vector())\n\n    // are the segments parrallel? Note that if they were colinear with overlap,\n    // they would have an endpoint intersection and that case was already handled above\n    if (pt === null) return null\n\n    // is the intersection found between the lines not on the segments?\n    if (!isInBbox(bboxOverlap, pt)) return null\n\n    // round the the computed point if needed\n    return rounder.round(pt.x, pt.y)\n  }\n\n  /**\n   * Split the given segment into multiple segments on the given points.\n   *  * Each existing segment will retain its leftSE and a new rightSE will be\n   *    generated for it.\n   *  * A new segment will be generated which will adopt the original segment's\n   *    rightSE, and a new leftSE will be generated for it.\n   *  * If there are more than two points given to split on, new segments\n   *    in the middle will be generated with new leftSE and rightSE's.\n   *  * An array of the newly generated SweepEvents will be returned.\n   *\n   * Warning: input array of points is modified\n   */\n  split(point) {\n    const newEvents = []\n    const alreadyLinked = point.events !== undefined\n\n    const newLeftSE = new SweepEvent(point, true)\n    const newRightSE = new SweepEvent(point, false)\n    const oldRightSE = this.rightSE\n    this.replaceRightSE(newRightSE)\n    newEvents.push(newRightSE)\n    newEvents.push(newLeftSE)\n    const newSeg = new Segment(\n      newLeftSE,\n      oldRightSE,\n      this.rings.slice(),\n      this.windings.slice(),\n    )\n\n    // when splitting a nearly vertical downward-facing segment,\n    // sometimes one of the resulting new segments is vertical, in which\n    // case its left and right events may need to be swapped\n    if (\n      SweepEvent.comparePoints(newSeg.leftSE.point, newSeg.rightSE.point) > 0\n    ) {\n      newSeg.swapEvents()\n    }\n    if (SweepEvent.comparePoints(this.leftSE.point, this.rightSE.point) > 0) {\n      this.swapEvents()\n    }\n\n    // in the point we just used to create new sweep events with was already\n    // linked to other events, we need to check if either of the affected\n    // segments should be consumed\n    if (alreadyLinked) {\n      newLeftSE.checkForConsuming()\n      newRightSE.checkForConsuming()\n    }\n\n    return newEvents\n  }\n\n  /* Swap which event is left and right */\n  swapEvents() {\n    const tmpEvt = this.rightSE\n    this.rightSE = this.leftSE\n    this.leftSE = tmpEvt\n    this.leftSE.isLeft = true\n    this.rightSE.isLeft = false\n    for (let i = 0, iMax = this.windings.length; i < iMax; i++) {\n      this.windings[i] *= -1\n    }\n  }\n\n  /* Consume another segment. We take their rings under our wing\n   * and mark them as consumed. Use for perfectly overlapping segments */\n  consume(other) {\n    let consumer = this\n    let consumee = other\n    while (consumer.consumedBy) consumer = consumer.consumedBy\n    while (consumee.consumedBy) consumee = consumee.consumedBy\n\n    const cmp = Segment.compare(consumer, consumee)\n    if (cmp === 0) return // already consumed\n    // the winner of the consumption is the earlier segment\n    // according to sweep line ordering\n    if (cmp > 0) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    // make sure a segment doesn't consume it's prev\n    if (consumer.prev === consumee) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    for (let i = 0, iMax = consumee.rings.length; i < iMax; i++) {\n      const ring = consumee.rings[i]\n      const winding = consumee.windings[i]\n      const index = consumer.rings.indexOf(ring)\n      if (index === -1) {\n        consumer.rings.push(ring)\n        consumer.windings.push(winding)\n      } else consumer.windings[index] += winding\n    }\n    consumee.rings = null\n    consumee.windings = null\n    consumee.consumedBy = consumer\n\n    // mark sweep events consumed as to maintain ordering in sweep event queue\n    consumee.leftSE.consumedBy = consumer.leftSE\n    consumee.rightSE.consumedBy = consumer.rightSE\n  }\n\n  /* The first segment previous segment chain that is in the result */\n  prevInResult() {\n    if (this._prevInResult !== undefined) return this._prevInResult\n    if (!this.prev) this._prevInResult = null\n    else if (this.prev.isInResult()) this._prevInResult = this.prev\n    else this._prevInResult = this.prev.prevInResult()\n    return this._prevInResult\n  }\n\n  beforeState() {\n    if (this._beforeState !== undefined) return this._beforeState\n    if (!this.prev)\n      this._beforeState = {\n        rings: [],\n        windings: [],\n        multiPolys: [],\n      }\n    else {\n      const seg = this.prev.consumedBy || this.prev\n      this._beforeState = seg.afterState()\n    }\n    return this._beforeState\n  }\n\n  afterState() {\n    if (this._afterState !== undefined) return this._afterState\n\n    const beforeState = this.beforeState()\n    this._afterState = {\n      rings: beforeState.rings.slice(0),\n      windings: beforeState.windings.slice(0),\n      multiPolys: [],\n    }\n    const ringsAfter = this._afterState.rings\n    const windingsAfter = this._afterState.windings\n    const mpsAfter = this._afterState.multiPolys\n\n    // calculate ringsAfter, windingsAfter\n    for (let i = 0, iMax = this.rings.length; i < iMax; i++) {\n      const ring = this.rings[i]\n      const winding = this.windings[i]\n      const index = ringsAfter.indexOf(ring)\n      if (index === -1) {\n        ringsAfter.push(ring)\n        windingsAfter.push(winding)\n      } else windingsAfter[index] += winding\n    }\n\n    // calcualte polysAfter\n    const polysAfter = []\n    const polysExclude = []\n    for (let i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n      if (windingsAfter[i] === 0) continue // non-zero rule\n      const ring = ringsAfter[i]\n      const poly = ring.poly\n      if (polysExclude.indexOf(poly) !== -1) continue\n      if (ring.isExterior) polysAfter.push(poly)\n      else {\n        if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly)\n        const index = polysAfter.indexOf(ring.poly)\n        if (index !== -1) polysAfter.splice(index, 1)\n      }\n    }\n\n    // calculate multiPolysAfter\n    for (let i = 0, iMax = polysAfter.length; i < iMax; i++) {\n      const mp = polysAfter[i].multiPoly\n      if (mpsAfter.indexOf(mp) === -1) mpsAfter.push(mp)\n    }\n\n    return this._afterState\n  }\n\n  /* Is this segment part of the final result? */\n  isInResult() {\n    // if we've been consumed, we're not in the result\n    if (this.consumedBy) return false\n\n    if (this._isInResult !== undefined) return this._isInResult\n\n    const mpsBefore = this.beforeState().multiPolys\n    const mpsAfter = this.afterState().multiPolys\n\n    switch (operation.type) {\n      case \"union\": {\n        // UNION - included iff:\n        //  * On one side of us there is 0 poly interiors AND\n        //  * On the other side there is 1 or more.\n        const noBefores = mpsBefore.length === 0\n        const noAfters = mpsAfter.length === 0\n        this._isInResult = noBefores !== noAfters\n        break\n      }\n\n      case \"intersection\": {\n        // INTERSECTION - included iff:\n        //  * on one side of us all multipolys are rep. with poly interiors AND\n        //  * on the other side of us, not all multipolys are repsented\n        //    with poly interiors\n        let least\n        let most\n        if (mpsBefore.length < mpsAfter.length) {\n          least = mpsBefore.length\n          most = mpsAfter.length\n        } else {\n          least = mpsAfter.length\n          most = mpsBefore.length\n        }\n        this._isInResult = most === operation.numMultiPolys && least < most\n        break\n      }\n\n      case \"xor\": {\n        // XOR - included iff:\n        //  * the difference between the number of multipolys represented\n        //    with poly interiors on our two sides is an odd number\n        const diff = Math.abs(mpsBefore.length - mpsAfter.length)\n        this._isInResult = diff % 2 === 1\n        break\n      }\n\n      case \"difference\": {\n        // DIFFERENCE included iff:\n        //  * on exactly one side, we have just the subject\n        const isJustSubject = (mps) => mps.length === 1 && mps[0].isSubject\n        this._isInResult = isJustSubject(mpsBefore) !== isJustSubject(mpsAfter)\n        break\n      }\n\n      default:\n        throw new Error(`Unrecognized operation type found ${operation.type}`)\n    }\n\n    return this._isInResult\n  }\n}\n","import rounder from \"./rounder\"\nimport Segment from \"./segment\"\n\nexport class RingIn {\n  constructor(geomRing, poly, isExterior) {\n    if (!Array.isArray(geomRing) || geomRing.length === 0) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n\n    this.poly = poly\n    this.isExterior = isExterior\n    this.segments = []\n\n    if (\n      typeof geomRing[0][0] !== \"number\" ||\n      typeof geomRing[0][1] !== \"number\"\n    ) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n\n    const firstPoint = rounder.round(geomRing[0][0], geomRing[0][1])\n    this.bbox = {\n      ll: { x: firstPoint.x, y: firstPoint.y },\n      ur: { x: firstPoint.x, y: firstPoint.y },\n    }\n\n    let prevPoint = firstPoint\n    for (let i = 1, iMax = geomRing.length; i < iMax; i++) {\n      if (\n        typeof geomRing[i][0] !== \"number\" ||\n        typeof geomRing[i][1] !== \"number\"\n      ) {\n        throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n      }\n      let point = rounder.round(geomRing[i][0], geomRing[i][1])\n      // skip repeated points\n      if (point.x === prevPoint.x && point.y === prevPoint.y) continue\n      this.segments.push(Segment.fromRing(prevPoint, point, this))\n      if (point.x < this.bbox.ll.x) this.bbox.ll.x = point.x\n      if (point.y < this.bbox.ll.y) this.bbox.ll.y = point.y\n      if (point.x > this.bbox.ur.x) this.bbox.ur.x = point.x\n      if (point.y > this.bbox.ur.y) this.bbox.ur.y = point.y\n      prevPoint = point\n    }\n    // add segment from last to first if last is not the same as first\n    if (firstPoint.x !== prevPoint.x || firstPoint.y !== prevPoint.y) {\n      this.segments.push(Segment.fromRing(prevPoint, firstPoint, this))\n    }\n  }\n\n  getSweepEvents() {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.segments.length; i < iMax; i++) {\n      const segment = this.segments[i]\n      sweepEvents.push(segment.leftSE)\n      sweepEvents.push(segment.rightSE)\n    }\n    return sweepEvents\n  }\n}\n\nexport class PolyIn {\n  constructor(geomPoly, multiPoly) {\n    if (!Array.isArray(geomPoly)) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n    this.exteriorRing = new RingIn(geomPoly[0], this, true)\n    // copy by value\n    this.bbox = {\n      ll: { x: this.exteriorRing.bbox.ll.x, y: this.exteriorRing.bbox.ll.y },\n      ur: { x: this.exteriorRing.bbox.ur.x, y: this.exteriorRing.bbox.ur.y },\n    }\n    this.interiorRings = []\n    for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {\n      const ring = new RingIn(geomPoly[i], this, false)\n      if (ring.bbox.ll.x < this.bbox.ll.x) this.bbox.ll.x = ring.bbox.ll.x\n      if (ring.bbox.ll.y < this.bbox.ll.y) this.bbox.ll.y = ring.bbox.ll.y\n      if (ring.bbox.ur.x > this.bbox.ur.x) this.bbox.ur.x = ring.bbox.ur.x\n      if (ring.bbox.ur.y > this.bbox.ur.y) this.bbox.ur.y = ring.bbox.ur.y\n      this.interiorRings.push(ring)\n    }\n    this.multiPoly = multiPoly\n  }\n\n  getSweepEvents() {\n    const sweepEvents = this.exteriorRing.getSweepEvents()\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringSweepEvents = this.interiorRings[i].getSweepEvents()\n      for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(ringSweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n\nexport class MultiPolyIn {\n  constructor(geom, isSubject) {\n    if (!Array.isArray(geom)) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n\n    try {\n      // if the input looks like a polygon, convert it to a multipolygon\n      if (typeof geom[0][0][0] === \"number\") geom = [geom]\n    } catch (ex) {\n      // The input is either malformed or has empty arrays.\n      // In either case, it will be handled later on.\n    }\n\n    this.polys = []\n    this.bbox = {\n      ll: { x: Number.POSITIVE_INFINITY, y: Number.POSITIVE_INFINITY },\n      ur: { x: Number.NEGATIVE_INFINITY, y: Number.NEGATIVE_INFINITY },\n    }\n    for (let i = 0, iMax = geom.length; i < iMax; i++) {\n      const poly = new PolyIn(geom[i], this)\n      if (poly.bbox.ll.x < this.bbox.ll.x) this.bbox.ll.x = poly.bbox.ll.x\n      if (poly.bbox.ll.y < this.bbox.ll.y) this.bbox.ll.y = poly.bbox.ll.y\n      if (poly.bbox.ur.x > this.bbox.ur.x) this.bbox.ur.x = poly.bbox.ur.x\n      if (poly.bbox.ur.y > this.bbox.ur.y) this.bbox.ur.y = poly.bbox.ur.y\n      this.polys.push(poly)\n    }\n    this.isSubject = isSubject\n  }\n\n  getSweepEvents() {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polySweepEvents = this.polys[i].getSweepEvents()\n      for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(polySweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n","import { compareVectorAngles } from \"./vector\"\nimport SweepEvent from \"./sweep-event\"\n\nexport class RingOut {\n  /* Given the segments from the sweep line pass, compute & return a series\n   * of closed rings from all the segments marked to be part of the result */\n  static factory(allSegments) {\n    const ringsOut = []\n\n    for (let i = 0, iMax = allSegments.length; i < iMax; i++) {\n      const segment = allSegments[i]\n      if (!segment.isInResult() || segment.ringOut) continue\n\n      let prevEvent = null\n      let event = segment.leftSE\n      let nextEvent = segment.rightSE\n      const events = [event]\n\n      const startingPoint = event.point\n      const intersectionLEs = []\n\n      /* Walk the chain of linked events to form a closed ring */\n      while (true) {\n        prevEvent = event\n        event = nextEvent\n        events.push(event)\n\n        /* Is the ring complete? */\n        if (event.point === startingPoint) break\n\n        while (true) {\n          const availableLEs = event.getAvailableLinkedEvents()\n\n          /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\n           * part of the algorithm malfunctioned... please file a bug report. */\n          if (availableLEs.length === 0) {\n            const firstPt = events[0].point\n            const lastPt = events[events.length - 1].point\n            throw new Error(\n              `Unable to complete output ring starting at [${firstPt.x},` +\n                ` ${firstPt.y}]. Last matching segment found ends at` +\n                ` [${lastPt.x}, ${lastPt.y}].`,\n            )\n          }\n\n          /* Only one way to go, so cotinue on the path */\n          if (availableLEs.length === 1) {\n            nextEvent = availableLEs[0].otherSE\n            break\n          }\n\n          /* We must have an intersection. Check for a completed loop */\n          let indexLE = null\n          for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n            if (intersectionLEs[j].point === event.point) {\n              indexLE = j\n              break\n            }\n          }\n          /* Found a completed loop. Cut that off and make a ring */\n          if (indexLE !== null) {\n            const intersectionLE = intersectionLEs.splice(indexLE)[0]\n            const ringEvents = events.splice(intersectionLE.index)\n            ringEvents.unshift(ringEvents[0].otherSE)\n            ringsOut.push(new RingOut(ringEvents.reverse()))\n            continue\n          }\n          /* register the intersection */\n          intersectionLEs.push({\n            index: events.length,\n            point: event.point,\n          })\n          /* Choose the left-most option to continue the walk */\n          const comparator = event.getLeftmostComparator(prevEvent)\n          nextEvent = availableLEs.sort(comparator)[0].otherSE\n          break\n        }\n      }\n\n      ringsOut.push(new RingOut(events))\n    }\n    return ringsOut\n  }\n\n  constructor(events) {\n    this.events = events\n    for (let i = 0, iMax = events.length; i < iMax; i++) {\n      events[i].segment.ringOut = this\n    }\n    this.poly = null\n  }\n\n  getGeom() {\n    // Remove superfluous points (ie extra points along a straight line),\n    let prevPt = this.events[0].point\n    const points = [prevPt]\n    for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n      const pt = this.events[i].point\n      const nextPt = this.events[i + 1].point\n      if (compareVectorAngles(pt, prevPt, nextPt) === 0) continue\n      points.push(pt)\n      prevPt = pt\n    }\n\n    // ring was all (within rounding error of angle calc) colinear points\n    if (points.length === 1) return null\n\n    // check if the starting point is necessary\n    const pt = points[0]\n    const nextPt = points[1]\n    if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift()\n\n    points.push(points[0])\n    const step = this.isExteriorRing() ? 1 : -1\n    const iStart = this.isExteriorRing() ? 0 : points.length - 1\n    const iEnd = this.isExteriorRing() ? points.length : -1\n    const orderedPoints = []\n    for (let i = iStart; i != iEnd; i += step)\n      orderedPoints.push([points[i].x, points[i].y])\n    return orderedPoints\n  }\n\n  isExteriorRing() {\n    if (this._isExteriorRing === undefined) {\n      const enclosing = this.enclosingRing()\n      this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true\n    }\n    return this._isExteriorRing\n  }\n\n  enclosingRing() {\n    if (this._enclosingRing === undefined) {\n      this._enclosingRing = this._calcEnclosingRing()\n    }\n    return this._enclosingRing\n  }\n\n  /* Returns the ring that encloses this one, if any */\n  _calcEnclosingRing() {\n    // start with the ealier sweep line event so that the prevSeg\n    // chain doesn't lead us inside of a loop of ours\n    let leftMostEvt = this.events[0]\n    for (let i = 1, iMax = this.events.length; i < iMax; i++) {\n      const evt = this.events[i]\n      if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt\n    }\n\n    let prevSeg = leftMostEvt.segment.prevInResult()\n    let prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n\n    while (true) {\n      // no segment found, thus no ring can enclose us\n      if (!prevSeg) return null\n\n      // no segments below prev segment found, thus the ring of the prev\n      // segment must loop back around and enclose us\n      if (!prevPrevSeg) return prevSeg.ringOut\n\n      // if the two segments are of different rings, the ring of the prev\n      // segment must either loop around us or the ring of the prev prev\n      // seg, which would make us and the ring of the prev peers\n      if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n        if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {\n          return prevSeg.ringOut\n        } else return prevSeg.ringOut.enclosingRing()\n      }\n\n      // two segments are from the same ring, so this was a penisula\n      // of that ring. iterate downward, keep searching\n      prevSeg = prevPrevSeg.prevInResult()\n      prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n    }\n  }\n}\n\nexport class PolyOut {\n  constructor(exteriorRing) {\n    this.exteriorRing = exteriorRing\n    exteriorRing.poly = this\n    this.interiorRings = []\n  }\n\n  addInterior(ring) {\n    this.interiorRings.push(ring)\n    ring.poly = this\n  }\n\n  getGeom() {\n    const geom = [this.exteriorRing.getGeom()]\n    // exterior ring was all (within rounding error of angle calc) colinear points\n    if (geom[0] === null) return null\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringGeom = this.interiorRings[i].getGeom()\n      // interior ring was all (within rounding error of angle calc) colinear points\n      if (ringGeom === null) continue\n      geom.push(ringGeom)\n    }\n    return geom\n  }\n}\n\nexport class MultiPolyOut {\n  constructor(rings) {\n    this.rings = rings\n    this.polys = this._composePolys(rings)\n  }\n\n  getGeom() {\n    const geom = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polyGeom = this.polys[i].getGeom()\n      // exterior ring was all (within rounding error of angle calc) colinear points\n      if (polyGeom === null) continue\n      geom.push(polyGeom)\n    }\n    return geom\n  }\n\n  _composePolys(rings) {\n    const polys = []\n    for (let i = 0, iMax = rings.length; i < iMax; i++) {\n      const ring = rings[i]\n      if (ring.poly) continue\n      if (ring.isExteriorRing()) polys.push(new PolyOut(ring))\n      else {\n        const enclosingRing = ring.enclosingRing()\n        if (!enclosingRing.poly) polys.push(new PolyOut(enclosingRing))\n        enclosingRing.poly.addInterior(ring)\n      }\n    }\n    return polys\n  }\n}\n","import SplayTree from \"splaytree\"\nimport Segment from \"./segment\"\nimport SweepEvent from \"./sweep-event\"\n\n/**\n * NOTE:  We must be careful not to change any segments while\n *        they are in the SplayTree. AFAIK, there's no way to tell\n *        the tree to rebalance itself - thus before splitting\n *        a segment that's in the tree, we remove it from the tree,\n *        do the split, then re-insert it. (Even though splitting a\n *        segment *shouldn't* change its correct position in the\n *        sweep line tree, the reality is because of rounding errors,\n *        it sometimes does.)\n */\n\nexport default class SweepLine {\n  constructor(queue, comparator = Segment.compare) {\n    this.queue = queue\n    this.tree = new SplayTree(comparator)\n    this.segments = []\n  }\n\n  process(event) {\n    const segment = event.segment\n    const newEvents = []\n\n    // if we've already been consumed by another segment,\n    // clean up our body parts and get out\n    if (event.consumedBy) {\n      if (event.isLeft) this.queue.remove(event.otherSE)\n      else this.tree.remove(segment)\n      return newEvents\n    }\n\n    const node = event.isLeft\n      ? this.tree.insert(segment)\n      : this.tree.find(segment)\n\n    if (!node)\n      throw new Error(\n        `Unable to find segment #${segment.id} ` +\n          `[${segment.leftSE.point.x}, ${segment.leftSE.point.y}] -> ` +\n          `[${segment.rightSE.point.x}, ${segment.rightSE.point.y}] ` +\n          \"in SweepLine tree. Please submit a bug report.\",\n      )\n\n    let prevNode = node\n    let nextNode = node\n    let prevSeg = undefined\n    let nextSeg = undefined\n\n    // skip consumed segments still in tree\n    while (prevSeg === undefined) {\n      prevNode = this.tree.prev(prevNode)\n      if (prevNode === null) prevSeg = null\n      else if (prevNode.key.consumedBy === undefined) prevSeg = prevNode.key\n    }\n\n    // skip consumed segments still in tree\n    while (nextSeg === undefined) {\n      nextNode = this.tree.next(nextNode)\n      if (nextNode === null) nextSeg = null\n      else if (nextNode.key.consumedBy === undefined) nextSeg = nextNode.key\n    }\n\n    if (event.isLeft) {\n      // Check for intersections against the previous segment in the sweep line\n      let prevMySplitter = null\n      if (prevSeg) {\n        const prevInter = prevSeg.getIntersection(segment)\n        if (prevInter !== null) {\n          if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter\n          if (!prevSeg.isAnEndpoint(prevInter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, prevInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // Check for intersections against the next segment in the sweep line\n      let nextMySplitter = null\n      if (nextSeg) {\n        const nextInter = nextSeg.getIntersection(segment)\n        if (nextInter !== null) {\n          if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter\n          if (!nextSeg.isAnEndpoint(nextInter)) {\n            const newEventsFromSplit = this._splitSafely(nextSeg, nextInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // For simplicity, even if we find more than one intersection we only\n      // spilt on the 'earliest' (sweep-line style) of the intersections.\n      // The other intersection will be handled in a future process().\n      if (prevMySplitter !== null || nextMySplitter !== null) {\n        let mySplitter = null\n        if (prevMySplitter === null) mySplitter = nextMySplitter\n        else if (nextMySplitter === null) mySplitter = prevMySplitter\n        else {\n          const cmpSplitters = SweepEvent.comparePoints(\n            prevMySplitter,\n            nextMySplitter,\n          )\n          mySplitter = cmpSplitters <= 0 ? prevMySplitter : nextMySplitter\n        }\n\n        // Rounding errors can cause changes in ordering,\n        // so remove afected segments and right sweep events before splitting\n        this.queue.remove(segment.rightSE)\n        newEvents.push(segment.rightSE)\n\n        const newEventsFromSplit = segment.split(mySplitter)\n        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n          newEvents.push(newEventsFromSplit[i])\n        }\n      }\n\n      if (newEvents.length > 0) {\n        // We found some intersections, so re-do the current event to\n        // make sure sweep line ordering is totally consistent for later\n        // use with the segment 'prev' pointers\n        this.tree.remove(segment)\n        newEvents.push(event)\n      } else {\n        // done with left event\n        this.segments.push(segment)\n        segment.prev = prevSeg\n      }\n    } else {\n      // event.isRight\n\n      // since we're about to be removed from the sweep line, check for\n      // intersections between our previous and next segments\n      if (prevSeg && nextSeg) {\n        const inter = prevSeg.getIntersection(nextSeg)\n        if (inter !== null) {\n          if (!prevSeg.isAnEndpoint(inter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n          if (!nextSeg.isAnEndpoint(inter)) {\n            const newEventsFromSplit = this._splitSafely(nextSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      this.tree.remove(segment)\n    }\n\n    return newEvents\n  }\n\n  /* Safely split a segment that is currently in the datastructures\n   * IE - a segment other than the one that is currently being processed. */\n  _splitSafely(seg, pt) {\n    // Rounding errors can cause changes in ordering,\n    // so remove afected segments and right sweep events before splitting\n    // removeNode() doesn't work, so have re-find the seg\n    // https://github.com/w8r/splay-tree/pull/5\n    this.tree.remove(seg)\n    const rightSE = seg.rightSE\n    this.queue.remove(rightSE)\n    const newEvents = seg.split(pt)\n    newEvents.push(rightSE)\n    // splitting can trigger consumption\n    if (seg.consumedBy === undefined) this.tree.insert(seg)\n    return newEvents\n  }\n}\n","import SplayTree from \"splaytree\"\nimport { getBboxOverlap } from \"./bbox\"\nimport * as geomIn from \"./geom-in\"\nimport * as geomOut from \"./geom-out\"\nimport rounder from \"./rounder\"\nimport SweepEvent from \"./sweep-event\"\nimport SweepLine from \"./sweep-line\"\n\n// Limits on iterative processes to prevent infinite loops - usually caused by floating-point math round-off errors.\nconst POLYGON_CLIPPING_MAX_QUEUE_SIZE =\n  (typeof process !== \"undefined\" &&\n    process.env.POLYGON_CLIPPING_MAX_QUEUE_SIZE) ||\n  1000000\nconst POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS =\n  (typeof process !== \"undefined\" &&\n    process.env.POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS) ||\n  1000000\n\nexport class Operation {\n  run(type, geom, moreGeoms) {\n    operation.type = type\n    rounder.reset()\n\n    /* Convert inputs to MultiPoly objects */\n    const multipolys = [new geomIn.MultiPolyIn(geom, true)]\n    for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n      multipolys.push(new geomIn.MultiPolyIn(moreGeoms[i], false))\n    }\n    operation.numMultiPolys = multipolys.length\n\n    /* BBox optimization for difference operation\n     * If the bbox of a multipolygon that's part of the clipping doesn't\n     * intersect the bbox of the subject at all, we can just drop that\n     * multiploygon. */\n    if (operation.type === \"difference\") {\n      // in place removal\n      const subject = multipolys[0]\n      let i = 1\n      while (i < multipolys.length) {\n        if (getBboxOverlap(multipolys[i].bbox, subject.bbox) !== null) i++\n        else multipolys.splice(i, 1)\n      }\n    }\n\n    /* BBox optimization for intersection operation\n     * If we can find any pair of multipolygons whose bbox does not overlap,\n     * then the result will be empty. */\n    if (operation.type === \"intersection\") {\n      // TODO: this is O(n^2) in number of polygons. By sorting the bboxes,\n      //       it could be optimized to O(n * ln(n))\n      for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n        const mpA = multipolys[i]\n        for (let j = i + 1, jMax = multipolys.length; j < jMax; j++) {\n          if (getBboxOverlap(mpA.bbox, multipolys[j].bbox) === null) return []\n        }\n      }\n    }\n\n    /* Put segment endpoints in a priority queue */\n    const queue = new SplayTree(SweepEvent.compare)\n    for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n      const sweepEvents = multipolys[i].getSweepEvents()\n      for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n        queue.insert(sweepEvents[j])\n\n        if (queue.size > POLYGON_CLIPPING_MAX_QUEUE_SIZE) {\n          // prevents an infinite loop, an otherwise common manifestation of bugs\n          throw new Error(\n            \"Infinite loop when putting segment endpoints in a priority queue \" +\n              \"(queue size too big). Please file a bug report.\",\n          )\n        }\n      }\n    }\n\n    /* Pass the sweep line over those endpoints */\n    const sweepLine = new SweepLine(queue)\n    let prevQueueSize = queue.size\n    let node = queue.pop()\n    while (node) {\n      const evt = node.key\n      if (queue.size === prevQueueSize) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        const seg = evt.segment\n        throw new Error(\n          `Unable to pop() ${evt.isLeft ? \"left\" : \"right\"} SweepEvent ` +\n            `[${evt.point.x}, ${evt.point.y}] from segment #${seg.id} ` +\n            `[${seg.leftSE.point.x}, ${seg.leftSE.point.y}] -> ` +\n            `[${seg.rightSE.point.x}, ${seg.rightSE.point.y}] from queue. ` +\n            \"Please file a bug report.\",\n        )\n      }\n\n      if (queue.size > POLYGON_CLIPPING_MAX_QUEUE_SIZE) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        throw new Error(\n          \"Infinite loop when passing sweep line over endpoints \" +\n            \"(queue size too big). Please file a bug report.\",\n        )\n      }\n\n      if (sweepLine.segments.length > POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        throw new Error(\n          \"Infinite loop when passing sweep line over endpoints \" +\n            \"(too many sweep line segments). Please file a bug report.\",\n        )\n      }\n\n      const newEvents = sweepLine.process(evt)\n      for (let i = 0, iMax = newEvents.length; i < iMax; i++) {\n        const evt = newEvents[i]\n        if (evt.consumedBy === undefined) queue.insert(evt)\n      }\n      prevQueueSize = queue.size\n      node = queue.pop()\n    }\n\n    // free some memory we don't need anymore\n    rounder.reset()\n\n    /* Collect and compile segments we're keeping into a multipolygon */\n    const ringsOut = geomOut.RingOut.factory(sweepLine.segments)\n    const result = new geomOut.MultiPolyOut(ringsOut)\n    return result.getGeom()\n  }\n}\n\n// singleton available by import\nconst operation = new Operation()\n\nexport default operation\n","import operation from \"./operation\"\n\nconst union = (geom, ...moreGeoms) => operation.run(\"union\", geom, moreGeoms)\n\nconst intersection = (geom, ...moreGeoms) =>\n  operation.run(\"intersection\", geom, moreGeoms)\n\nconst xor = (geom, ...moreGeoms) => operation.run(\"xor\", geom, moreGeoms)\n\nconst difference = (subjectGeom, ...clippingGeoms) =>\n  operation.run(\"difference\", subjectGeom, clippingGeoms)\n\nexport default {\n  union: union,\n  intersection: intersection,\n  xor: xor,\n  difference: difference,\n}\n"],"names":["isInBbox","bbox","point","ll","x","ur","y","getBboxOverlap","b1","b2","lowerX","upperX","epsilon","Number","EPSILON","undefined","Math","pow","EPSILON_SQ","cmp","a","b","ab","PtRounder","_classCallCheck","this","reset","xRounder","CoordRounder","yRounder","round","tree","SplayTree","value","coord","node","add","prevNode","prev","key","remove","nextNode","next","rounder","splitter","sum","elen","e","flen","f","h","Q","Qnew","hh","bvirt","enow","fnow","eindex","findex","hindex","vec","n","Float64Array","B","C1","C2","D","u","orient2d","ax","ay","bx","by","cx","cy","detleft","detright","det","detsum","abs","acxtail","acytail","bcxtail","bcytail","c","ahi","alo","bhi","blo","_i","_j","_0","s1","s0","t1","t0","u3","acx","bcx","acy","bcy","i","estimate","errbound","C1len","C2len","Dlen","orient2dadapt","crossProduct","dotProduct","compareVectorAngles","basePt","endPt1","endPt2","res","length","v","sqrt","cosineOfAngle","pShared","pBase","pAngle","vBase","vAngle","horizontalIntersection","pt","verticalIntersection","SweepEvent","isLeft","events","push","other","Error","otherEvents","iMax","evt","checkForConsuming","numEvents","evt1","segment","consumedBy","j","evt2","otherSE","consume","ringOut","isInResult","baseEvent","_this","cache","Map","fillCache","linkedEvent","nextEvent","set","sine","cosine","has","_cache$get","get","asine","acosine","_cache$get2","bsine","bcosine","ptCmp","comparePoints","link","Segment","compare","aPt","bPt","segmentId","leftSE","rightSE","rings","windings","id","newRightSE","y1","y2","isAnEndpoint","lPt","rPt","vector","yDist","xFromYDist","xDist","yFromXDist","tBbox","oBbox","bboxOverlap","tlp","trp","olp","orp","touchesOtherLSE","comparePoint","touchesThisLSE","touchesOtherRSE","touchesThisRSE","pt1","v1","pt2","v2","kross","ve","d1","d2","intersection","newEvents","alreadyLinked","newLeftSE","oldRightSE","replaceRightSE","newSeg","slice","swapEvents","tmpEvt","consumer","consumee","tmp","ring","winding","index","indexOf","_prevInResult","prevInResult","_beforeState","seg","afterState","multiPolys","_afterState","beforeState","ringsAfter","windingsAfter","mpsAfter","polysAfter","polysExclude","poly","isExterior","splice","mp","multiPoly","_isInResult","mpsBefore","operation","type","noBefores","noAfters","least","most","numMultiPolys","diff","isJustSubject","mps","isSubject","concat","alx","blx","arx","brx","aly","bly","ary","bry","aCmpBLeft","bCmpARight","bCmpALeft","aCmpBRight","leftPt","rightPt","cmpPts","RingIn","geomRing","Array","isArray","segments","firstPoint","prevPoint","fromRing","_createClass","sweepEvents","PolyIn","geomPoly","exteriorRing","interiorRings","getSweepEvents","ringSweepEvents","jMax","MultiPolyIn","geom","ex","polys","POSITIVE_INFINITY","NEGATIVE_INFINITY","polySweepEvents","RingOut","prevPt","points","nextPt","shift","step","isExteriorRing","iStart","iEnd","orderedPoints","_isExteriorRing","enclosing","enclosingRing","_enclosingRing","_calcEnclosingRing","leftMostEvt","prevSeg","prevPrevSeg","allSegments","ringsOut","prevEvent","event","startingPoint","intersectionLEs","availableLEs","getAvailableLinkedEvents","firstPt","lastPt","indexLE","comparator","getLeftmostComparator","sort","intersectionLE","ringEvents","unshift","reverse","PolyOut","getGeom","ringGeom","MultiPolyOut","_composePolys","polyGeom","addInterior","SweepLine","queue","arguments","insert","find","nextSeg","prevMySplitter","prevInter","getIntersection","newEventsFromSplit","_splitSafely","nextMySplitter","nextInter","mySplitter","split","inter","POLYGON_CLIPPING_MAX_QUEUE_SIZE","process","env","POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS","Operation","moreGeoms","multipolys","geomIn","subject","mpA","size","sweepLine","prevQueueSize","pop","geomOut","factory","result","union","_len","_key","run","_len2","_key2","xor","_len3","_key3","difference","subjectGeom","_len4","clippingGeoms","_key4"],"mappings":";;;;;;;;kkMAOO,IAAMA,EAAW,SAACC,EAAMC,GAC7B,OACED,EAAKE,GAAGC,GAAKF,EAAME,GACnBF,EAAME,GAAKH,EAAKI,GAAGD,GACnBH,EAAKE,GAAGG,GAAKJ,EAAMI,GACnBJ,EAAMI,GAAKL,EAAKI,GAAGC,CAEtB,EAKYC,EAAiB,SAACC,EAAIC,GAG/BA,GAAAA,EAAGJ,GAAGD,EAAII,EAAGL,GAAGC,GAChBI,EAAGH,GAAGD,EAAIK,EAAGN,GAAGC,GAChBK,EAAGJ,GAAGC,EAAIE,EAAGL,GAAGG,GAChBE,EAAGH,GAAGC,EAAIG,EAAGN,GAAGG,EAEhB,OAAO,KAGHI,IAAAA,EAASF,EAAGL,GAAGC,EAAIK,EAAGN,GAAGC,EAAIK,EAAGN,GAAGC,EAAII,EAAGL,GAAGC,EAC7CO,EAASH,EAAGH,GAAGD,EAAIK,EAAGJ,GAAGD,EAAII,EAAGH,GAAGD,EAAIK,EAAGJ,GAAGD,EAO5C,MAAA,CAAED,GAAI,CAAEC,EAAGM,EAAQJ,EAJXE,EAAGL,GAAGG,EAAIG,EAAGN,GAAGG,EAAIG,EAAGN,GAAGG,EAAIE,EAAGL,GAAGG,GAIZD,GAAI,CAAED,EAAGO,EAAQL,EAHzCE,EAAGH,GAAGC,EAAIG,EAAGJ,GAAGC,EAAIE,EAAGH,GAAGC,EAAIG,EAAGJ,GAAGC,GAIpD,ECjCGM,EAAUC,OAAOC,aAGLC,IAAZH,IAAuBA,EAAUI,KAAKC,IAAI,GAAI,KAElD,IAAMC,EAAaN,EAAUA,EAGhBO,EAAM,SAACC,EAAGC,GAEjB,IAACT,EAAUQ,GAAKA,EAAIR,IACjBA,EAAUS,GAAKA,EAAIT,EACtB,OAAO,EAKX,IAAMU,EAAKF,EAAIC,EACXC,OAAAA,EAAKA,EAAKJ,EAAaE,EAAIC,EACtB,EAIFD,EAAIC,GAAK,EAAI,CACrB,ECdKE,aACU,SAAAA,IAAAC,EAAAC,KAAAF,GACZE,KAAKC,OACN,gCAED,WACED,KAAKE,SAAW,IAAIC,EACpBH,KAAKI,SAAW,IAAID,CACrB,sBAED,SAAMxB,EAAGE,GACA,MAAA,CACLF,EAAGqB,KAAKE,SAASG,MAAM1B,GACvBE,EAAGmB,KAAKI,SAASC,MAAMxB,GAE1B,UAGGsB,aACU,SAAAA,IAAAJ,EAAAC,KAAAG,GACZH,KAAKM,KAAO,IAAIC,EAEXF,KAAAA,MAAM,4BAUbG,MAAA,SAAMC,GACEC,IAAAA,EAAOV,KAAKM,KAAKK,IAAIF,GAErBG,EAAWZ,KAAKM,KAAKO,KAAKH,GAChC,GAAiB,OAAbE,GAAqD,IAAhClB,EAAIgB,EAAKI,IAAKF,EAASE,KAEvCF,OADPZ,KAAKM,KAAKS,OAAON,GACVG,EAASE,IAGZE,IAAAA,EAAWhB,KAAKM,KAAKW,KAAKP,GAChC,OAAiB,OAAbM,GAAqD,IAAhCtB,EAAIgB,EAAKI,IAAKE,EAASF,MAC9Cd,KAAKM,KAAKS,OAAON,GACVO,EAASF,KAGXL,CACR,MAGH,IACMS,EAAU,IAAIpB,ECpEb,MACMqB,EAAW,UAIjB,SAASC,EAAIC,EAAMC,EAAGC,EAAMC,EAAGC,GAClC,IAAIC,EAAGC,EAAMC,EAAIC,EACbC,EAAOR,EAAE,GACTS,EAAOP,EAAE,GACTQ,EAAS,EACTC,EAAS,EACRF,EAAOD,GAAWC,GAAQD,GAC3BJ,EAAII,EACJA,EAAOR,IAAIU,KAEXN,EAAIK,EACJA,EAAOP,IAAIS,IAEXC,IAAAA,EAAS,EACb,GAAIF,EAASX,GAAQY,EAASV,EAc1B,IAbKQ,EAAOD,GAAWC,GAAQD,GAC3BH,EAAOG,EAAOJ,EACdE,EAAKF,GAAKC,EAAOG,GACjBA,EAAOR,IAAIU,KAEXL,EAAOI,EAAOL,EACdE,EAAKF,GAAKC,EAAOI,GACjBA,EAAOP,IAAIS,IAEfP,EAAIC,EACO,IAAPC,IACAH,EAAES,KAAYN,GAEXI,EAASX,GAAQY,EAASV,GACxBQ,EAAOD,GAAWC,GAAQD,GAC3BH,EAAOD,EAAII,EACXD,EAAQF,EAAOD,EACfE,EAAKF,GAAKC,EAAOE,IAAUC,EAAOD,GAClCC,EAAOR,IAAIU,KAEXL,EAAOD,EAAIK,EACXF,EAAQF,EAAOD,EACfE,EAAKF,GAAKC,EAAOE,IAAUE,EAAOF,GAClCE,EAAOP,IAAIS,IAEfP,EAAIC,EACO,IAAPC,IACAH,EAAES,KAAYN,GAInBI,KAAAA,EAASX,GACZM,EAAOD,EAAII,EACXD,EAAQF,EAAOD,EACfE,EAAKF,GAAKC,EAAOE,IAAUC,EAAOD,GAClCC,EAAOR,IAAIU,GACXN,EAAIC,EACO,IAAPC,IACAH,EAAES,KAAYN,GAGfK,KAAAA,EAASV,GACZI,EAAOD,EAAIK,EACXF,EAAQF,EAAOD,EACfE,EAAKF,GAAKC,EAAOE,IAAUE,EAAOF,GAClCE,EAAOP,IAAIS,GACXP,EAAIC,EACO,IAAPC,IACAH,EAAES,KAAYN,GAMtB,OAHU,IAANF,GAAsB,IAAXQ,IACXT,EAAES,KAAYR,GAEXQ,CACV,CA4DM,SAASC,EAAIC,GAChB,OAAO,IAAIC,aAAaD,EAC3B,CCvID,MAIME,EAAIH,EAAI,GACRI,EAAKJ,EAAI,GACTK,EAAKL,EAAI,IACTM,EAAIN,EAAI,IACRO,EAAIP,EAAI,GAgKP,SAASQ,EAASC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GACnCC,MAAAA,GAAWL,EAAKI,IAAOH,EAAKE,GAC5BG,GAAYP,EAAKI,IAAOD,EAAKE,GAC7BG,EAAMF,EAAUC,EAEtB,GAAgB,IAAZD,GAA8B,IAAbC,GAAmBD,EAAU,GAAQC,EAAW,EAAI,OAAOC,EAE1EC,MAAAA,EAAS9D,KAAK+D,IAAIJ,EAAUC,GAC9B5D,OAAAA,KAAK+D,IAAIF,IAhLI,sBAgLmBC,EAAeD,GAtKvD,SAAuBR,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAII,GAC3C,IAAIE,EAASC,EAASC,EAASC,EAC3B7B,EAAO8B,EAAGC,EAAKC,EAAKC,EAAKC,EAAKC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAE9D,MAAMC,EAAM5B,EAAKI,EACXyB,EAAM3B,EAAKE,EACX0B,EAAM7B,EAAKI,EACX0B,EAAM5B,EAAKE,EAEjBkB,EAAKK,EAAMG,EACXhB,EAAIxC,EAAWqD,EACfZ,EAAMD,GAAKA,EAAIa,GACfX,EAAMW,EAAMZ,EACZD,EAAIxC,EAAWwD,EACfb,EAAMH,GAAKA,EAAIgB,GACfZ,EAAMY,EAAMb,EACZM,EAAKP,EAAME,GAAOI,EAAKP,EAAME,EAAMD,EAAMC,EAAMF,EAAMG,GACrDM,EAAKK,EAAMD,EACXd,EAAIxC,EAAWuD,EACfd,EAAMD,GAAKA,EAAIe,GACfb,EAAMa,EAAMd,EACZD,EAAIxC,EAAWsD,EACfX,EAAMH,GAAKA,EAAIc,GACfV,EAAMU,EAAMX,EACZQ,EAAKT,EAAME,GAAOM,EAAKT,EAAME,EAAMD,EAAMC,EAAMF,EAAMG,GACrDC,EAAKI,EAAKE,EACVzC,EAAQuC,EAAKJ,EACb1B,EAAE,GAAK8B,GAAMJ,EAAKnC,IAAUA,EAAQyC,GACpCL,EAAKE,EAAKH,EACVnC,EAAQoC,EAAKE,EACbD,EAAKC,GAAMF,EAAKpC,IAAUmC,EAAKnC,GAC/BmC,EAAKE,EAAKG,EACVxC,EAAQqC,EAAKF,EACb1B,EAAE,GAAK4B,GAAMF,EAAKnC,IAAUA,EAAQwC,GACpCE,EAAKN,EAAKD,EACVnC,EAAQ0C,EAAKN,EACb3B,EAAE,GAAK2B,GAAMM,EAAK1C,IAAUmC,EAAKnC,GACjCS,EAAE,GAAKiC,EAEP,IAAInB,ED8ED,SAAkB/B,EAAMC,GAC3B,IAAII,EAAIJ,EAAE,GACV,IAAK,IAAIsD,EAAI,EAAGA,EAAIvD,EAAMuD,IAAKlD,GAAKJ,EAAEsD,GACtC,OAAOlD,CACV,CClFamD,CAAS,EAAGvC,GAClBwC,EAjDa,sBAiDazB,EAC1BD,GAAAA,GAAO0B,IAAa1B,GAAO0B,EAC3B,OAAO1B,EAYX,GATAvB,EAAQe,EAAK4B,EACbjB,EAAUX,GAAM4B,EAAM3C,IAAUA,EAAQmB,GACxCnB,EAAQiB,EAAK2B,EACbhB,EAAUX,GAAM2B,EAAM5C,IAAUA,EAAQmB,GACxCnB,EAAQgB,EAAK6B,EACblB,EAAUX,GAAM6B,EAAM7C,IAAUA,EAAQoB,GACxCpB,EAAQkB,EAAK4B,EACbjB,EAAUX,GAAM4B,EAAM9C,IAAUA,EAAQoB,GAExB,IAAZM,GAA6B,IAAZC,GAA6B,IAAZC,GAA6B,IAAZC,EACnD,OAAON,EAKPA,GAFJ0B,EAlEiB,sBAkESzB,EDpEA,sBCoE0B9D,KAAK+D,IAAIF,GAC7DA,GAAQoB,EAAMd,EAAUiB,EAAMpB,GAAYmB,EAAMjB,EAAUgB,EAAMjB,GAC5DJ,GAAO0B,IAAa1B,GAAO0B,EAAU,OAAO1B,EAEhDe,EAAKZ,EAAUoB,EACfhB,EAAIxC,EAAWoC,EACfK,EAAMD,GAAKA,EAAIJ,GACfM,EAAMN,EAAUK,EAChBD,EAAIxC,EAAWwD,EACfb,EAAMH,GAAKA,EAAIgB,GACfZ,EAAMY,EAAMb,EACZM,EAAKP,EAAME,GAAOI,EAAKP,EAAME,EAAMD,EAAMC,EAAMF,EAAMG,GACrDM,EAAKb,EAAUiB,EACfd,EAAIxC,EAAWqC,EACfI,EAAMD,GAAKA,EAAIH,GACfK,EAAML,EAAUI,EAChBD,EAAIxC,EAAWsD,EACfX,EAAMH,GAAKA,EAAIc,GACfV,EAAMU,EAAMX,EACZQ,EAAKT,EAAME,GAAOM,EAAKT,EAAME,EAAMD,EAAMC,EAAMF,EAAMG,GACrDC,EAAKI,EAAKE,EACVzC,EAAQuC,EAAKJ,EACbtB,EAAE,GAAK0B,GAAMJ,EAAKnC,IAAUA,EAAQyC,GACpCL,EAAKE,EAAKH,EACVnC,EAAQoC,EAAKE,EACbD,EAAKC,GAAMF,EAAKpC,IAAUmC,EAAKnC,GAC/BmC,EAAKE,EAAKG,EACVxC,EAAQqC,EAAKF,EACbtB,EAAE,GAAKwB,GAAMF,EAAKnC,IAAUA,EAAQwC,GACpCE,EAAKN,EAAKD,EACVnC,EAAQ0C,EAAKN,EACbvB,EAAE,GAAKuB,GAAMM,EAAK1C,IAAUmC,EAAKnC,GACjCa,EAAE,GAAK6B,EACP,MAAMQ,EAAQ3D,EAAI,EAAGkB,EAAG,EAAGI,EAAGH,GAE9B4B,EAAKK,EAAMd,EACXC,EAAIxC,EAAWqD,EACfZ,EAAMD,GAAKA,EAAIa,GACfX,EAAMW,EAAMZ,EACZD,EAAIxC,EAAWuC,EACfI,EAAMH,GAAKA,EAAID,GACfK,EAAML,EAAUI,EAChBM,EAAKP,EAAME,GAAOI,EAAKP,EAAME,EAAMD,EAAMC,EAAMF,EAAMG,GACrDM,EAAKK,EAAMjB,EACXE,EAAIxC,EAAWuD,EACfd,EAAMD,GAAKA,EAAIe,GACfb,EAAMa,EAAMd,EACZD,EAAIxC,EAAWsC,EACfK,EAAMH,GAAKA,EAAIF,GACfM,EAAMN,EAAUK,EAChBQ,EAAKT,EAAME,GAAOM,EAAKT,EAAME,EAAMD,EAAMC,EAAMF,EAAMG,GACrDC,EAAKI,EAAKE,EACVzC,EAAQuC,EAAKJ,EACbtB,EAAE,GAAK0B,GAAMJ,EAAKnC,IAAUA,EAAQyC,GACpCL,EAAKE,EAAKH,EACVnC,EAAQoC,EAAKE,EACbD,EAAKC,GAAMF,EAAKpC,IAAUmC,EAAKnC,GAC/BmC,EAAKE,EAAKG,EACVxC,EAAQqC,EAAKF,EACbtB,EAAE,GAAKwB,GAAMF,EAAKnC,IAAUA,EAAQwC,GACpCE,EAAKN,EAAKD,EACVnC,EAAQ0C,EAAKN,EACbvB,EAAE,GAAKuB,GAAMM,EAAK1C,IAAUmC,EAAKnC,GACjCa,EAAE,GAAK6B,EACP,MAAMS,EAAQ5D,EAAI2D,EAAOxC,EAAI,EAAGG,EAAGF,GAEnC2B,EAAKZ,EAAUG,EACfC,EAAIxC,EAAWoC,EACfK,EAAMD,GAAKA,EAAIJ,GACfM,EAAMN,EAAUK,EAChBD,EAAIxC,EAAWuC,EACfI,EAAMH,GAAKA,EAAID,GACfK,EAAML,EAAUI,EAChBM,EAAKP,EAAME,GAAOI,EAAKP,EAAME,EAAMD,EAAMC,EAAMF,EAAMG,GACrDM,EAAKb,EAAUC,EACfE,EAAIxC,EAAWqC,EACfI,EAAMD,GAAKA,EAAIH,GACfK,EAAML,EAAUI,EAChBD,EAAIxC,EAAWsC,EACfK,EAAMH,GAAKA,EAAIF,GACfM,EAAMN,EAAUK,EAChBQ,EAAKT,EAAME,GAAOM,EAAKT,EAAME,EAAMD,EAAMC,EAAMF,EAAMG,GACrDC,EAAKI,EAAKE,EACVzC,EAAQuC,EAAKJ,EACbtB,EAAE,GAAK0B,GAAMJ,EAAKnC,IAAUA,EAAQyC,GACpCL,EAAKE,EAAKH,EACVnC,EAAQoC,EAAKE,EACbD,EAAKC,GAAMF,EAAKpC,IAAUmC,EAAKnC,GAC/BmC,EAAKE,EAAKG,EACVxC,EAAQqC,EAAKF,EACbtB,EAAE,GAAKwB,GAAMF,EAAKnC,IAAUA,EAAQwC,GACpCE,EAAKN,EAAKD,EACVnC,EAAQ0C,EAAKN,EACbvB,EAAE,GAAKuB,GAAMM,EAAK1C,IAAUmC,EAAKnC,GACjCa,EAAE,GAAK6B,EACP,MAAMU,EAAO7D,EAAI4D,EAAOxC,EAAI,EAAGE,EAAGD,GAElC,OAAOA,EAAEwC,EAAO,EACnB,CAYWC,CAActC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAII,EACjD,CClLM,IAAM8B,EAAe,SAACxF,EAAGC,GAAJ,OAAUD,EAAEhB,EAAIiB,EAAEf,EAAIc,EAAEd,EAAIe,EAAEjB,CAA9B,EAGfyG,EAAa,SAACzF,EAAGC,GAAJ,OAAUD,EAAEhB,EAAIiB,EAAEjB,EAAIgB,EAAEd,EAAIe,EAAEf,CAA9B,EAGbwG,EAAsB,SAACC,EAAQC,EAAQC,GAC5CC,IAAAA,EAAM9C,EACV2C,EAAO3G,EACP2G,EAAOzG,EACP0G,EAAO5G,EACP4G,EAAO1G,EACP2G,EAAO7G,EACP6G,EAAO3G,GAET,OAAI4G,EAAM,GAAW,EACjBA,EAAM,EAAU,EACb,CACR,EAEYC,EAAS,SAACC,GAAMpG,OAAAA,KAAKqG,KAAKR,EAAWO,EAAGA,GAA/B,EAUTE,EAAgB,SAACC,EAASC,EAAOC,GAC5C,IAAMC,EAAQ,CAAEtH,EAAGoH,EAAMpH,EAAImH,EAAQnH,EAAGE,EAAGkH,EAAMlH,EAAIiH,EAAQjH,GACvDqH,EAAS,CAAEvH,EAAGqH,EAAOrH,EAAImH,EAAQnH,EAAGE,EAAGmH,EAAOnH,EAAIiH,EAAQjH,GAChE,OAAOuG,EAAWc,EAAQD,GAASP,EAAOQ,GAAUR,EAAOO,EAC5D,EAyCYE,EAAyB,SAACC,EAAIT,EAAG9G,GAC5C,OAAY,IAAR8G,EAAE9G,EAAgB,KACf,CAAEF,EAAGyH,EAAGzH,EAAKgH,EAAEhH,EAAIgH,EAAE9G,GAAMA,EAAIuH,EAAGvH,GAAIA,EAAGA,EACjD,EAKYwH,EAAuB,SAACD,EAAIT,EAAGhH,GAC1C,OAAY,IAARgH,EAAEhH,EAAgB,KACf,CAAEA,EAAGA,EAAGE,EAAGuH,EAAGvH,EAAK8G,EAAE9G,EAAI8G,EAAEhH,GAAMA,EAAIyH,EAAGzH,GAChD,ECtFoB2H,aA8BP7H,SAAAA,EAAAA,EAAO8H,GAAQxG,EAAAC,KAAAsG,QACJhH,IAAjBb,EAAM+H,OAAsB/H,EAAM+H,OAAS,CAACxG,MAC3CvB,EAAM+H,OAAOC,KAAKzG,MAClBvB,KAAAA,MAAQA,EACbuB,KAAKuG,OAASA,CAEf,yBAED/F,MAAA,SAAKkG,GACH,GAAIA,EAAMjI,QAAUuB,KAAKvB,MACvB,MAAM,IAAIkI,MAAM,uCAGlB,IADA,IAAMC,EAAcF,EAAMjI,MAAM+H,OACvB5B,EAAI,EAAGiC,EAAOD,EAAYlB,OAAQd,EAAIiC,EAAMjC,IAAK,CACxD,IAAMkC,EAAMF,EAAYhC,GACxB5E,KAAKvB,MAAM+H,OAAOC,KAAKK,GACvBA,EAAIrI,MAAQuB,KAAKvB,KAClB,CACDuB,KAAK+G,mBACN,kCAID,WAQO,IADL,IAAMC,EAAYhH,KAAKvB,MAAM+H,OAAOd,OAC3Bd,EAAI,EAAGA,EAAIoC,EAAWpC,IAAK,CAC5BqC,IAAAA,EAAOjH,KAAKvB,MAAM+H,OAAO5B,GAC/B,QAAgCtF,IAA5B2H,EAAKC,QAAQC,WACjB,IAAK,IAAIC,EAAIxC,EAAI,EAAGwC,EAAIJ,EAAWI,IAAK,CAChCC,IAAAA,EAAOrH,KAAKvB,MAAM+H,OAAOY,QACP9H,IAApB+H,EAAKF,aACLF,EAAKK,QAAQ7I,MAAM+H,SAAWa,EAAKC,QAAQ7I,MAAM+H,QACrDS,EAAKC,QAAQK,QAAQF,EAAKH,SAC3B,CACF,CACF,yCAED,WAGO,IADCV,IAAAA,EAAS,GACN5B,EAAI,EAAGiC,EAAO7G,KAAKvB,MAAM+H,OAAOd,OAAQd,EAAIiC,EAAMjC,IAAK,CACxDkC,IAAAA,EAAM9G,KAAKvB,MAAM+H,OAAO5B,GAC1BkC,IAAQ9G,OAAS8G,EAAII,QAAQM,SAAWV,EAAII,QAAQO,cACtDjB,EAAOC,KAAKK,EAEf,CACD,OAAON,CACR,gCAYDhG,MAAA,SAAsBkH,GAAW,IAAAC,EAAA3H,KACzB4H,EAAQ,IAAIC,IAEZC,EAAY,SAACC,GACjB,ID5EsBjC,EAASC,EAAOC,EACpCC,EACAC,EC0EI8B,EAAYD,EAAYT,QAC9BM,EAAMK,IAAIF,EAAa,CACrBG,MD9EoBpC,EC8EF6B,EAAKlJ,MD9EMsH,EC8EC2B,EAAUjJ,MD9EJuH,EC8EWgC,EAAUvJ,MD7EzDwH,EAAQ,CAAEtH,EAAGoH,EAAMpH,EAAImH,EAAQnH,EAAGE,EAAGkH,EAAMlH,EAAIiH,EAAQjH,GACvDqH,EAAS,CAAEvH,EAAGqH,EAAOrH,EAAImH,EAAQnH,EAAGE,EAAGmH,EAAOnH,EAAIiH,EAAQjH,GACzDsG,EAAae,EAAQD,GAASP,EAAOQ,GAAUR,EAAOO,IC4EvDkC,OAAQtC,EAAc8B,EAAKlJ,MAAOiJ,EAAUjJ,MAAOuJ,EAAUvJ,QAEhE,EAED,OAAO,SAACkB,EAAGC,GACJgI,EAAMQ,IAAIzI,IAAImI,EAAUnI,GACxBiI,EAAMQ,IAAIxI,IAAIkI,EAAUlI,GAE7B,IAAAyI,EAAyCT,EAAMU,IAAI3I,GAArC4I,IAANL,KAAqBM,IAARL,OACrBM,EAAyCb,EAAMU,IAAI1I,GAArC8I,IAANR,KAAqBS,EAA7BF,EAAqBN,OAGrB,OAAII,GAAS,GAAKG,GAAS,EACrBF,EAAUG,EAAgB,EAC1BH,EAAUG,GAAiB,EACxB,EAILJ,EAAQ,GAAKG,EAAQ,EACnBF,EAAUG,GAAiB,EAC3BH,EAAUG,EAAgB,EACvB,EAILD,EAAQH,GAAe,EACvBG,EAAQH,EAAc,EACnB,CACR,CACF,oBAnID/H,MACeb,SAAAA,EAAGC,GAEhB,IAAMgJ,EAAQtC,EAAWuC,cAAclJ,EAAElB,MAAOmB,EAAEnB,OAClD,OAAc,IAAVmK,EAAoBA,GAGpBjJ,EAAElB,QAAUmB,EAAEnB,OAAOkB,EAAEmJ,KAAKlJ,GAG5BD,EAAE4G,SAAW3G,EAAE2G,OAAe5G,EAAE4G,OAAS,GAAK,EAI3CwC,EAAQC,QAAQrJ,EAAEuH,QAAStH,EAAEsH,uCAItC,SAAqB+B,EAAKC,GACpBD,OAAAA,EAAItK,EAAIuK,EAAIvK,GAAW,EACvBsK,EAAItK,EAAIuK,EAAIvK,EAAU,EAEtBsK,EAAIpK,EAAIqK,EAAIrK,GAAW,EACvBoK,EAAIpK,EAAIqK,EAAIrK,EAAU,EAEnB,CACR,UCtBCsK,EAAY,EAEKJ,aA6HnB,SAAAA,EAAYK,EAAQC,EAASC,EAAOC,GAAUxJ,EAAAC,KAAA+I,GACvCS,KAAAA,KAAOL,EACPC,KAAAA,OAASA,EACdA,EAAOlC,QAAUlH,KACjBoJ,EAAO9B,QAAU+B,EACZA,KAAAA,QAAUA,EACfA,EAAQnC,QAAUlH,KAClBqJ,EAAQ/B,QAAU8B,EACbE,KAAAA,MAAQA,EACbtJ,KAAKuJ,SAAWA,CAGjB,yCA0BD,SAAeE,GACRJ,KAAAA,QAAUI,EACfzJ,KAAKqJ,QAAQnC,QAAUlH,KACvBA,KAAKqJ,QAAQ/B,QAAUtH,KAAKoJ,OAC5BpJ,KAAKoJ,OAAO9B,QAAUtH,KAAKqJ,OAC5B,qBAED,WACE,IAAMK,EAAK1J,KAAKoJ,OAAO3K,MAAMI,EACvB8K,EAAK3J,KAAKqJ,QAAQ5K,MAAMI,EACvB,MAAA,CACLH,GAAI,CAAEC,EAAGqB,KAAKoJ,OAAO3K,MAAME,EAAGE,EAAG6K,EAAKC,EAAKD,EAAKC,GAChD/K,GAAI,CAAED,EAAGqB,KAAKqJ,QAAQ5K,MAAME,EAAGE,EAAG6K,EAAKC,EAAKD,EAAKC,GAEpD,uBAGD,WACS,MAAA,CACLhL,EAAGqB,KAAKqJ,QAAQ5K,MAAME,EAAIqB,KAAKoJ,OAAO3K,MAAME,EAC5CE,EAAGmB,KAAKqJ,QAAQ5K,MAAMI,EAAImB,KAAKoJ,OAAO3K,MAAMI,EAE/C,uBAED2B,MAAA,SAAa4F,GACX,OACGA,EAAGzH,IAAMqB,KAAKoJ,OAAO3K,MAAME,GAAKyH,EAAGvH,IAAMmB,KAAKoJ,OAAO3K,MAAMI,GAC3DuH,EAAGzH,IAAMqB,KAAKqJ,QAAQ5K,MAAME,GAAKyH,EAAGvH,IAAMmB,KAAKqJ,QAAQ5K,MAAMI,CAEjE,uBAeD2B,MAAA,SAAa/B,GACX,GAAIuB,KAAK4J,aAAanL,GAAQ,OAAO,EAErC,IAAMoL,EAAM7J,KAAKoJ,OAAO3K,MAClBqL,EAAM9J,KAAKqJ,QAAQ5K,MACnBkH,EAAI3F,KAAK+J,SAGf,GAAIF,EAAIlL,IAAMmL,EAAInL,EACZF,OAAAA,EAAME,IAAMkL,EAAIlL,EAAU,EACvBF,EAAME,EAAIkL,EAAIlL,EAAI,GAAK,EAKhC,IAAMqL,GAASvL,EAAMI,EAAIgL,EAAIhL,GAAK8G,EAAE9G,EAC9BoL,EAAaJ,EAAIlL,EAAIqL,EAAQrE,EAAEhH,EACjCF,GAAAA,EAAME,IAAMsL,EAAY,OAAO,EAInC,IAAMC,GAASzL,EAAME,EAAIkL,EAAIlL,GAAKgH,EAAEhH,EAC9BwL,EAAaN,EAAIhL,EAAIqL,EAAQvE,EAAE9G,EACrC,OAAIJ,EAAMI,IAAMsL,EAAmB,EAC5B1L,EAAMI,EAAIsL,GAAc,EAAI,CACpC,0BAiBD3J,MAAA,SAAgBkG,GAEd,IAAM0D,EAAQpK,KAAKxB,OACb6L,EAAQ3D,EAAMlI,OACd8L,EAAcxL,EAAesL,EAAOC,GAC1C,GAAoB,OAAhBC,EAAsB,OAAO,KAMjC,IAAMC,EAAMvK,KAAKoJ,OAAO3K,MAClB+L,EAAMxK,KAAKqJ,QAAQ5K,MACnBgM,EAAM/D,EAAM0C,OAAO3K,MACnBiM,EAAMhE,EAAM2C,QAAQ5K,MAKpBkM,EAAkBpM,EAAS6L,EAAOK,IAAmC,IAA3BzK,KAAK4K,aAAaH,GAC5DI,EAAiBtM,EAAS8L,EAAOE,IAAoC,IAA5B7D,EAAMkE,aAAaL,GAC5DO,EAAkBvM,EAAS6L,EAAOM,IAAmC,IAA3B1K,KAAK4K,aAAaF,GAC5DK,EAAiBxM,EAAS8L,EAAOG,IAAoC,IAA5B9D,EAAMkE,aAAaJ,GAG9DK,GAAAA,GAAkBF,EAGpB,OAAII,IAAmBD,EAAwBN,GAC1CO,GAAkBD,EAAwBJ,EAGxC,KAIT,GAAIG,EAEF,OAAIC,GACEP,EAAI5L,IAAM+L,EAAI/L,GAAK4L,EAAI1L,IAAM6L,EAAI7L,EAAU,KAG1C0L,EAIT,GAAII,EAEF,OAAII,GACEP,EAAI7L,IAAM8L,EAAI9L,GAAK6L,EAAI3L,IAAM4L,EAAI5L,EAAU,KAG1C4L,EAIT,GAAIM,GAAkBD,EAAiB,OAAO,KAG1CC,GAAAA,EAAgB,OAAOP,EAC3B,GAAIM,EAAiB,OAAOJ,EAI5B,IAAMtE,EFtOkB,SAAC4E,EAAKC,EAAIC,EAAKC,GAIzC,GAAa,IAATF,EAAGtM,EAAS,OAAO0H,EAAqB6E,EAAKC,EAAIH,EAAIrM,GACzD,GAAa,IAATwM,EAAGxM,EAAS,OAAO0H,EAAqB2E,EAAKC,EAAIC,EAAIvM,GACzD,GAAa,IAATsM,EAAGpM,EAAS,OAAOsH,EAAuB+E,EAAKC,EAAIH,EAAInM,GAC3D,GAAa,IAATsM,EAAGtM,EAAS,OAAOsH,EAAuB6E,EAAKC,EAAIC,EAAIrM,GAM3D,IAAMuM,EAAQjG,EAAa8F,EAAIE,GAC/B,GAAa,GAATC,EAAY,OAAO,KAEvB,IAAMC,EAAK,CAAE1M,EAAGuM,EAAIvM,EAAIqM,EAAIrM,EAAGE,EAAGqM,EAAIrM,EAAImM,EAAInM,GACxCyM,EAAKnG,EAAakG,EAAIJ,GAAMG,EAC5BG,EAAKpG,EAAakG,EAAIF,GAAMC,EAS3B,MAAA,CAAEzM,GANEqM,EAAIrM,EAAI4M,EAAKN,EAAGtM,GACpBuM,EAAIvM,EAAI2M,EAAKH,EAAGxM,IAGD,EAEPE,GAJJmM,EAAInM,EAAI0M,EAAKN,EAAGpM,GACpBqM,EAAIrM,EAAIyM,EAAKH,EAAGtM,IAED,EAEvB,CE0Mc2M,CAAajB,EAAKvK,KAAK+J,SAAUU,EAAK/D,EAAMqD,UAIvD,OAAW,OAAP3D,EAAoB,KAGnB7H,EAAS+L,EAAalE,GAGpBlF,EAAQb,MAAM+F,EAAGzH,EAAGyH,EAAGvH,GAHS,IAIxC,gBAcD2B,MAAA,SAAM/B,GACEgN,IAAAA,EAAY,GACZC,OAAiCpM,IAAjBb,EAAM+H,OAEtBmF,EAAY,IAAIrF,EAAW7H,GAAO,GAClCgL,EAAa,IAAInD,EAAW7H,GAAO,GACnCmN,EAAa5L,KAAKqJ,QACnBwC,KAAAA,eAAepC,GACpBgC,EAAUhF,KAAKgD,GACfgC,EAAUhF,KAAKkF,GACTG,IAAAA,EAAS,IAAI/C,EACjB4C,EACAC,EACA5L,KAAKsJ,MAAMyC,QACX/L,KAAKuJ,SAASwC,SAuBhB,OAhBEzF,EAAWuC,cAAciD,EAAO1C,OAAO3K,MAAOqN,EAAOzC,QAAQ5K,OAAS,GAEtEqN,EAAOE,aAEL1F,EAAWuC,cAAc7I,KAAKoJ,OAAO3K,MAAOuB,KAAKqJ,QAAQ5K,OAAS,GACpEuB,KAAKgM,aAMHN,IACFC,EAAU5E,oBACV0C,EAAW1C,qBAGN0E,CACR,2BAGD,WACQQ,IAAAA,EAASjM,KAAKqJ,QACfA,KAAAA,QAAUrJ,KAAKoJ,OACfA,KAAAA,OAAS6C,EACdjM,KAAKoJ,OAAO7C,QAAS,EACrBvG,KAAKqJ,QAAQ9C,QAAS,EACtB,IAAK,IAAI3B,EAAI,EAAGiC,EAAO7G,KAAKuJ,SAAS7D,OAAQd,EAAIiC,EAAMjC,IACrD5E,KAAKuJ,SAAS3E,KAAO,CAExB,kBAIDpE,MAAA,SAAQkG,GAGCwF,IAFHA,IAAAA,EAAWlM,KACXmM,EAAWzF,EACRwF,EAAS/E,YAAY+E,EAAWA,EAAS/E,WACzCgF,KAAAA,EAAShF,YAAYgF,EAAWA,EAAShF,WAE1CzH,IAAAA,EAAMqJ,EAAQC,QAAQkD,EAAUC,GACtC,GAAY,IAARzM,EAAJ,CAGIA,GAAAA,EAAM,EAAG,CACL0M,IAAAA,EAAMF,EACZA,EAAWC,EACXA,EAAWC,CAbA,CAiBb,GAAIF,EAASrL,OAASsL,EAAU,CACxBC,IAAAA,EAAMF,EACZA,EAAWC,EACXA,EAAWC,CACZ,CAED,IAAK,IAAIxH,EAAI,EAAGiC,EAAOsF,EAAS7C,MAAM5D,OAAQd,EAAIiC,EAAMjC,IAAK,CAC3D,IAAMyH,EAAOF,EAAS7C,MAAM1E,GACtB0H,EAAUH,EAAS5C,SAAS3E,GAC5B2H,EAAQL,EAAS5C,MAAMkD,QAAQH,IACtB,IAAXE,GACFL,EAAS5C,MAAM7C,KAAK4F,GACpBH,EAAS3C,SAAS9C,KAAK6F,IAClBJ,EAAS3C,SAASgD,IAAUD,CACpC,CACDH,EAAS7C,MAAQ,KACjB6C,EAAS5C,SAAW,KACpB4C,EAAShF,WAAa+E,EAGtBC,EAAS/C,OAAOjC,WAAa+E,EAAS9C,OACtC+C,EAAS9C,QAAQlC,WAAa+E,EAAS7C,OAtC1B,CAuCd,6BAGD,WACE,YAA2B/J,IAAvBU,KAAKyM,gBACJzM,KAAKa,KACDb,KAAKa,KAAK4G,aAAczH,KAAKyM,cAAgBzM,KAAKa,KACtDb,KAAKyM,cAAgBzM,KAAKa,KAAK6L,eAFpB1M,KAAKyM,cAAgB,MADQzM,KAAKyM,aAKnD,4BAED,WACE,QAA0BnN,IAAtBU,KAAK2M,aAA4B,OAAO3M,KAAK2M,aACjD,GAAK3M,KAAKa,KAML,CACG+L,IAAAA,EAAM5M,KAAKa,KAAKsG,YAAcnH,KAAKa,KACzCb,KAAK2M,aAAeC,EAAIC,YACzB,MARC7M,KAAK2M,aAAe,CAClBrD,MAAO,GACPC,SAAU,GACVuD,WAAY,IAMhB,OAAO9M,KAAK2M,YACb,2BAED,WACE,QAAyBrN,IAArBU,KAAK+M,YAA2B,OAAO/M,KAAK+M,YAEhD,IAAMC,EAAchN,KAAKgN,cACzBhN,KAAK+M,YAAc,CACjBzD,MAAO0D,EAAY1D,MAAMyC,MAAM,GAC/BxC,SAAUyD,EAAYzD,SAASwC,MAAM,GACrCe,WAAY,IAOd,IALA,IAAMG,EAAajN,KAAK+M,YAAYzD,MAC9B4D,EAAgBlN,KAAK+M,YAAYxD,SACjC4D,EAAWnN,KAAK+M,YAAYD,WAGzBlI,EAAI,EAAGiC,EAAO7G,KAAKsJ,MAAM5D,OAAQd,EAAIiC,EAAMjC,IAAK,CACvD,IAAMyH,EAAOrM,KAAKsJ,MAAM1E,GAClB0H,EAAUtM,KAAKuJ,SAAS3E,GACxB2H,EAAQU,EAAWT,QAAQH,IAClB,IAAXE,GACFU,EAAWxG,KAAK4F,GAChBa,EAAczG,KAAK6F,IACdY,EAAcX,IAAUD,CArBtB,CA2BX,IAFMc,IAAAA,EAAa,GACbC,EAAe,GACZzI,EAAI,EAAGiC,EAAOoG,EAAWvH,OAAQd,EAAIiC,EAAMjC,IAC9CsI,GAAqB,IAArBA,EAActI,GAAdsI,CACJ,IAAMb,EAAOY,EAAWrI,GAClB0I,EAAOjB,EAAKiB,KACdD,IAAgC,IAAhCA,EAAab,QAAQc,GACrBjB,GAAAA,EAAKkB,WAAYH,EAAW3G,KAAK6G,OAChC,EACiC,IAAhCD,EAAab,QAAQc,IAAcD,EAAa5G,KAAK6G,GACnDf,IAAAA,EAAQa,EAAWZ,QAAQH,EAAKiB,OACvB,IAAXf,GAAca,EAAWI,OAAOjB,EAAO,EAC5C,CAVsD,CAczD,IAAK,IAAI3H,EAAI,EAAGiC,EAAOuG,EAAW1H,OAAQd,EAAIiC,EAAMjC,IAAK,CACvD,IAAM6I,EAAKL,EAAWxI,GAAG8I,WACK,IAA1BP,EAASX,QAAQiB,IAAYN,EAAS1G,KAAKgH,EAChD,CAED,OAAOzN,KAAK+M,WACb,2BAGD,WAEE,GAAI/M,KAAKmH,WAAY,OAAO,EAE5B,QAAyB7H,IAArBU,KAAK2N,YAA2B,OAAO3N,KAAK2N,YAEhD,IAAMC,EAAY5N,KAAKgN,cAAcF,WAC/BK,EAAWnN,KAAK6M,aAAaC,WAE3Be,OAAAA,EAAUC,MAChB,IAAK,QAIH,IAAMC,EAAiC,IAArBH,EAAUlI,OACtBsI,EAA+B,IAApBb,EAASzH,OAC1B1F,KAAK2N,YAAcI,IAAcC,EACjC,MAGF,IAAK,eAKH,IAAIC,EACAC,EACAN,EAAUlI,OAASyH,EAASzH,QAC9BuI,EAAQL,EAAUlI,OAClBwI,EAAOf,EAASzH,SAEhBuI,EAAQd,EAASzH,OACjBwI,EAAON,EAAUlI,QAEdiI,KAAAA,YAAcO,IAASL,EAAUM,eAAiBF,EAAQC,EAC/D,MAGF,IAAK,MAIH,IAAME,EAAO7O,KAAK+D,IAAIsK,EAAUlI,OAASyH,EAASzH,QAClD1F,KAAK2N,YAAcS,EAAO,GAAM,EAChC,MAGF,IAAK,aAGH,IAAMC,EAAgB,SAACC,GAAQA,OAAe,IAAfA,EAAI5I,QAAgB4I,EAAI,GAAGC,SAApC,EACjBZ,KAAAA,YAAcU,EAAcT,KAAeS,EAAclB,GAC9D,MAGF,QACE,MAAM,IAAIxG,MAAJ,qCAAA6H,OAA+CX,EAAUC,OAGnE,OAAO9N,KAAK2N,WACb,0BAziBchO,SAAAA,EAAGC,GACV6O,IAAAA,EAAM9O,EAAEyJ,OAAO3K,MAAME,EACrB+P,EAAM9O,EAAEwJ,OAAO3K,MAAME,EACrBgQ,EAAMhP,EAAE0J,QAAQ5K,MAAME,EACtBiQ,EAAMhP,EAAEyJ,QAAQ5K,MAAME,EAG5B,GAAIiQ,EAAMH,EAAK,OAAO,EACtB,GAAIE,EAAMD,EAAK,OAAQ,EAEjBG,IAAAA,EAAMlP,EAAEyJ,OAAO3K,MAAMI,EACrBiQ,EAAMlP,EAAEwJ,OAAO3K,MAAMI,EACrBkQ,EAAMpP,EAAE0J,QAAQ5K,MAAMI,EACtBmQ,EAAMpP,EAAEyJ,QAAQ5K,MAAMI,EAGxB4P,GAAAA,EAAMC,EAAK,CAETI,GAAAA,EAAMD,GAAOC,EAAMC,EAAK,OAAO,EACnC,GAAID,EAAMD,GAAOC,EAAMC,EAAK,OAAQ,EAG9BE,IAAAA,EAAYtP,EAAEiL,aAAahL,EAAEwJ,OAAO3K,OAC1C,GAAIwQ,EAAY,EAAG,OAAO,EACtBA,GAAAA,EAAY,EAAG,OAAQ,EAGrBC,IAAAA,EAAatP,EAAEgL,aAAajL,EAAE0J,QAAQ5K,OAC5C,OAAmB,IAAfyQ,EAAyBA,GAIrB,CAhCS,CAoCfT,GAAAA,EAAMC,EAAK,CACTG,GAAAA,EAAMC,GAAOD,EAAMG,EAAK,OAAQ,EAChCH,GAAAA,EAAMC,GAAOD,EAAMG,EAAK,OAAO,EAG7BG,IAAAA,EAAYvP,EAAEgL,aAAajL,EAAEyJ,OAAO3K,OAC1C,GAAkB,IAAd0Q,EAAiB,OAAOA,EAGtBC,IAAAA,EAAazP,EAAEiL,aAAahL,EAAEyJ,QAAQ5K,OAC5C,OAAI2Q,EAAa,EAAU,EACvBA,EAAa,GAAW,EAIrB,CAnDU,CA0DnB,GAAIP,EAAMC,EAAK,OAAQ,EACvB,GAAID,EAAMC,EAAK,OAAO,EAMlBH,GAAAA,EAAMC,EAAK,CACPM,IAAAA,EAAatP,EAAEgL,aAAajL,EAAE0J,QAAQ5K,OAC5C,GAAmB,IAAfyQ,EAAkB,OAAOA,CAnEZ,CAuEfP,GAAAA,EAAMC,EAAK,CACPQ,IAAAA,EAAazP,EAAEiL,aAAahL,EAAEyJ,QAAQ5K,OAC5C,GAAI2Q,EAAa,EAAG,OAAO,EAC3B,GAAIA,EAAa,EAAG,OAAQ,CAC7B,CAEGT,GAAAA,IAAQC,EAAK,CAGf,IAAM/L,EAAKkM,EAAMF,EACXjM,EAAK+L,EAAMF,EACX1L,EAAKiM,EAAMF,EACXhM,EAAK8L,EAAMF,EACb7L,GAAAA,EAAKD,GAAMG,EAAKD,EAAI,OAAO,EAC3BD,GAAAA,EAAKD,GAAMG,EAAKD,EAAI,OAAQ,CArFf,CA0FnB,OAAI6L,EAAMC,EAAY,EAClBD,EAAMC,GAMNG,EAAMC,GANa,EAOnBD,EAAMC,EAAY,EAIlBrP,EAAE6J,GAAK5J,EAAE4J,IAAY,EACrB7J,EAAE6J,GAAK5J,EAAE4J,GAAW,EAGjB,CACR,mBAkBDhJ,MAAA,SAAgBwK,EAAKE,EAAKmB,GACxB,IAAIgD,EAAQC,EAAShD,EAGfiD,EAASjJ,EAAWuC,cAAcmC,EAAKE,GACzCqE,GAAAA,EAAS,EACXF,EAASrE,EACTsE,EAAUpE,EACVoB,EAAU,MACL,MAAIiD,EAAS,GAKlB,MAAM,IAAI5I,MACkCqE,0CAAAA,OAAAA,EAAIrM,EAAMqM,MAAAA,OAAAA,EAAInM,EAD1D,MAJAwQ,EAASnE,EACToE,EAAUtE,EACVsB,GAAW,CAEX,CAMF,OAAO,IAAIvD,EAFI,IAAIzC,EAAW+I,GAAQ,GACtB,IAAI/I,EAAWgJ,GAAS,GACJ,CAACjD,GAAO,CAACC,GAC9C,UCvKUkD,EAAb,WACE,SAAAA,EAAYC,EAAUnC,EAAMC,GAC1B,GADsCxN,EAAAC,KAAAwP,IACjCE,MAAMC,QAAQF,IAAiC,IAApBA,EAAS/J,OACvC,MAAM,IAAIiB,MAAM,yDAQhB,GALG2G,KAAAA,KAAOA,EACPC,KAAAA,WAAaA,EACbqC,KAAAA,SAAW,GAGY,iBAAnBH,EAAS,GAAG,IACO,iBAAnBA,EAAS,GAAG,GAEnB,MAAM,IAAI9I,MAAM,yDAGZkJ,IAAAA,EAAa3O,EAAQb,MAAMoP,EAAS,GAAG,GAAIA,EAAS,GAAG,IAC7DzP,KAAKxB,KAAO,CACVE,GAAI,CAAEC,EAAGkR,EAAWlR,EAAGE,EAAGgR,EAAWhR,GACrCD,GAAI,CAAED,EAAGkR,EAAWlR,EAAGE,EAAGgR,EAAWhR,IAIvC,IADIiR,IAAAA,EAAYD,EACPjL,EAAI,EAAGiC,EAAO4I,EAAS/J,OAAQd,EAAIiC,EAAMjC,IAAK,CAEnD,GAA0B,iBAAnB6K,EAAS7K,GAAG,IACO,iBAAnB6K,EAAS7K,GAAG,GAEnB,MAAM,IAAI+B,MAAM,yDAEdlI,IAAAA,EAAQyC,EAAQb,MAAMoP,EAAS7K,GAAG,GAAI6K,EAAS7K,GAAG,IAElDnG,EAAME,IAAMmR,EAAUnR,GAAKF,EAAMI,IAAMiR,EAAUjR,IACrDmB,KAAK4P,SAASnJ,KAAKsC,EAAQgH,SAASD,EAAWrR,EAAOuB,OAClDvB,EAAME,EAAIqB,KAAKxB,KAAKE,GAAGC,IAAGqB,KAAKxB,KAAKE,GAAGC,EAAIF,EAAME,GACjDF,EAAMI,EAAImB,KAAKxB,KAAKE,GAAGG,IAAGmB,KAAKxB,KAAKE,GAAGG,EAAIJ,EAAMI,GACjDJ,EAAME,EAAIqB,KAAKxB,KAAKI,GAAGD,IAAGqB,KAAKxB,KAAKI,GAAGD,EAAIF,EAAME,GACjDF,EAAMI,EAAImB,KAAKxB,KAAKI,GAAGC,IAAGmB,KAAKxB,KAAKI,GAAGC,EAAIJ,EAAMI,GACrDiR,EAAYrR,EAtCwB,CAyClCoR,EAAWlR,IAAMmR,EAAUnR,GAAKkR,EAAWhR,IAAMiR,EAAUjR,GAC7DmB,KAAK4P,SAASnJ,KAAKsC,EAAQgH,SAASD,EAAWD,EAAY7P,MAE9D,CA7CH,OAAAgQ,EAAAR,EAAA,CAAA,CAAA1O,IAAA,iBAAAN,MA+CE,WAEE,IADMyP,IAAAA,EAAc,GACXrL,EAAI,EAAGiC,EAAO7G,KAAK4P,SAASlK,OAAQd,EAAIiC,EAAMjC,IAAK,CAC1D,IAAMsC,EAAUlH,KAAK4P,SAAShL,GAC9BqL,EAAYxJ,KAAKS,EAAQkC,QACzB6G,EAAYxJ,KAAKS,EAAQmC,QAC1B,CACD,OAAO4G,CACR,KAvDHT,CAAA,CAAA,GA0DaU,EAAb,WACcC,SAAAA,EAAAA,EAAUzC,GACpB,GAD+B3N,EAAAC,KAAAkQ,IAC1BR,MAAMC,QAAQQ,GACjB,MAAM,IAAIxJ,MAAM,yDAElB3G,KAAKoQ,aAAe,IAAIZ,EAAOW,EAAS,GAAInQ,MAAM,GAElDA,KAAKxB,KAAO,CACVE,GAAI,CAAEC,EAAGqB,KAAKoQ,aAAa5R,KAAKE,GAAGC,EAAGE,EAAGmB,KAAKoQ,aAAa5R,KAAKE,GAAGG,GACnED,GAAI,CAAED,EAAGqB,KAAKoQ,aAAa5R,KAAKI,GAAGD,EAAGE,EAAGmB,KAAKoQ,aAAa5R,KAAKI,GAAGC,IAEhEwR,KAAAA,cAAgB,GACrB,IAAK,IAAIzL,EAAI,EAAGiC,EAAOsJ,EAASzK,OAAQd,EAAIiC,EAAMjC,IAAK,CACrD,IAAMyH,EAAO,IAAImD,EAAOW,EAASvL,GAAI5E,MAAM,GACvCqM,EAAK7N,KAAKE,GAAGC,EAAIqB,KAAKxB,KAAKE,GAAGC,IAAGqB,KAAKxB,KAAKE,GAAGC,EAAI0N,EAAK7N,KAAKE,GAAGC,GAC/D0N,EAAK7N,KAAKE,GAAGG,EAAImB,KAAKxB,KAAKE,GAAGG,IAAGmB,KAAKxB,KAAKE,GAAGG,EAAIwN,EAAK7N,KAAKE,GAAGG,GAC/DwN,EAAK7N,KAAKI,GAAGD,EAAIqB,KAAKxB,KAAKI,GAAGD,IAAGqB,KAAKxB,KAAKI,GAAGD,EAAI0N,EAAK7N,KAAKI,GAAGD,GAC/D0N,EAAK7N,KAAKI,GAAGC,EAAImB,KAAKxB,KAAKI,GAAGC,IAAGmB,KAAKxB,KAAKI,GAAGC,EAAIwN,EAAK7N,KAAKI,GAAGC,GACnEmB,KAAKqQ,cAAc5J,KAAK4F,EACzB,CACIqB,KAAAA,UAAYA,CAClB,CArBH,OAAAsC,EAAAE,EAAA,CAAA,CAAApP,IAAA,iBAAAN,MAuBE,WAEE,IADA,IAAMyP,EAAcjQ,KAAKoQ,aAAaE,iBAC7B1L,EAAI,EAAGiC,EAAO7G,KAAKqQ,cAAc3K,OAAQd,EAAIiC,EAAMjC,IAE1D,IADM2L,IAAAA,EAAkBvQ,KAAKqQ,cAAczL,GAAG0L,iBACrClJ,EAAI,EAAGoJ,EAAOD,EAAgB7K,OAAQ0B,EAAIoJ,EAAMpJ,IACvD6I,EAAYxJ,KAAK8J,EAAgBnJ,IAGrC,OAAO6I,CACR,KAhCHC,CAAA,CAAA,GAmCaO,EAAb,WACcC,SAAAA,EAAAA,EAAMnC,GAChB,GAD2BxO,EAAAC,KAAAyQ,IACtBf,MAAMC,QAAQe,GACjB,MAAM,IAAI/J,MAAM,yDAGd,IAE2B,iBAAlB+J,EAAK,GAAG,GAAG,KAAiBA,EAAO,CAACA,GAIhD,CAHC,MAAOC,GAGR,CAEIC,KAAAA,MAAQ,GACb5Q,KAAKxB,KAAO,CACVE,GAAI,CAAEC,EAAGS,OAAOyR,kBAAmBhS,EAAGO,OAAOyR,mBAC7CjS,GAAI,CAAED,EAAGS,OAAO0R,kBAAmBjS,EAAGO,OAAO0R,oBAE/C,IAAK,IAAIlM,EAAI,EAAGiC,EAAO6J,EAAKhL,OAAQd,EAAIiC,EAAMjC,IAAK,CAC3C0I,IAAAA,EAAO,IAAI4C,EAAOQ,EAAK9L,GAAI5E,MAC7BsN,EAAK9O,KAAKE,GAAGC,EAAIqB,KAAKxB,KAAKE,GAAGC,IAAGqB,KAAKxB,KAAKE,GAAGC,EAAI2O,EAAK9O,KAAKE,GAAGC,GAC/D2O,EAAK9O,KAAKE,GAAGG,EAAImB,KAAKxB,KAAKE,GAAGG,IAAGmB,KAAKxB,KAAKE,GAAGG,EAAIyO,EAAK9O,KAAKE,GAAGG,GAC/DyO,EAAK9O,KAAKI,GAAGD,EAAIqB,KAAKxB,KAAKI,GAAGD,IAAGqB,KAAKxB,KAAKI,GAAGD,EAAI2O,EAAK9O,KAAKI,GAAGD,GAC/D2O,EAAK9O,KAAKI,GAAGC,EAAImB,KAAKxB,KAAKI,GAAGC,IAAGmB,KAAKxB,KAAKI,GAAGC,EAAIyO,EAAK9O,KAAKI,GAAGC,GACnEmB,KAAK4Q,MAAMnK,KAAK6G,EACjB,CACIiB,KAAAA,UAAYA,CAClB,CA5BH,OAAAyB,EAAAS,EAAA,CAAA,CAAA3P,IAAA,iBAAAN,MA8BE,WAEE,IADMyP,IAAAA,EAAc,GACXrL,EAAI,EAAGiC,EAAO7G,KAAK4Q,MAAMlL,OAAQd,EAAIiC,EAAMjC,IAElD,IADMmM,IAAAA,EAAkB/Q,KAAK4Q,MAAMhM,GAAG0L,iBAC7BlJ,EAAI,EAAGoJ,EAAOO,EAAgBrL,OAAQ0B,EAAIoJ,EAAMpJ,IACvD6I,EAAYxJ,KAAKsK,EAAgB3J,IAGrC,OAAO6I,CACR,KAvCHQ,CAAA,CAAA,GC7FaO,EAAb,WAiFE,SAAAA,EAAYxK,GAAQzG,EAAAC,KAAAgR,GACbxK,KAAAA,OAASA,EACd,IAAK,IAAI5B,EAAI,EAAGiC,EAAOL,EAAOd,OAAQd,EAAIiC,EAAMjC,IAC9C4B,EAAO5B,GAAGsC,QAAQM,QAAUxH,KAEzBsN,KAAAA,KAAO,IACb,CAvFH,OAAA0C,EAAAgB,EAAA,CAAA,CAAAlQ,IAAA,UAAAN,MAyFE,WAIO,IAFL,IAAIyQ,EAASjR,KAAKwG,OAAO,GAAG/H,MACtByS,EAAS,CAACD,GACPrM,EAAI,EAAGiC,EAAO7G,KAAKwG,OAAOd,OAAS,EAAGd,EAAIiC,EAAMjC,IAAK,CAC5D,IAAMwB,EAAKpG,KAAKwG,OAAO5B,GAAGnG,MACpB0S,EAASnR,KAAKwG,OAAO5B,EAAI,GAAGnG,MACc,IAA5C4G,EAAoBe,EAAI6K,EAAQE,KACpCD,EAAOzK,KAAKL,GACZ6K,EAAS7K,EATH,CAaJ8K,GAAkB,IAAlBA,EAAOxL,OAAc,OAAO,KAGhC,IAAMU,EAAK8K,EAAO,GACZC,EAASD,EAAO,GAC0B,IAA5C7L,EAAoBe,EAAI6K,EAAQE,IAAeD,EAAOE,QAE1DF,EAAOzK,KAAKyK,EAAO,IAKd,IAJCG,IAAAA,EAAOrR,KAAKsR,iBAAmB,GAAK,EACpCC,EAASvR,KAAKsR,iBAAmB,EAAIJ,EAAOxL,OAAS,EACrD8L,EAAOxR,KAAKsR,iBAAmBJ,EAAOxL,QAAU,EAChD+L,EAAgB,GACb7M,EAAI2M,EAAQ3M,GAAK4M,EAAM5M,GAAKyM,EACnCI,EAAchL,KAAK,CAACyK,EAAOtM,GAAGjG,EAAGuS,EAAOtM,GAAG/F,IAC7C,OAAO4S,CACR,GArHH,CAAA3Q,IAAA,iBAAAN,MAuHE,WACE,QAA6BlB,IAAzBU,KAAK0R,gBAA+B,CACtC,IAAMC,EAAY3R,KAAK4R,gBAClBF,KAAAA,iBAAkBC,IAAaA,EAAUL,gBAC/C,CACD,OAAOtR,KAAK0R,eACb,GA7HH,CAAA5Q,IAAA,gBAAAN,MA+HE,WAIE,YAH4BlB,IAAxBU,KAAK6R,iBACP7R,KAAK6R,eAAiB7R,KAAK8R,sBAEtB9R,KAAK6R,cACb,GApIH,CAAA/Q,IAAA,qBAAAN,MAuIE,WAIE,IADA,IAAIuR,EAAc/R,KAAKwG,OAAO,GACrB5B,EAAI,EAAGiC,EAAO7G,KAAKwG,OAAOd,OAAQd,EAAIiC,EAAMjC,IAAK,CACxD,IAAMkC,EAAM9G,KAAKwG,OAAO5B,GACpB0B,EAAW0C,QAAQ+I,EAAajL,GAAO,IAAGiL,EAAcjL,EAC7D,CAKD,IAHA,IAAIkL,EAAUD,EAAY7K,QAAQwF,eAC9BuF,EAAcD,EAAUA,EAAQtF,eAAiB,OAExC,CAEX,IAAKsF,EAAS,OAAO,KAIjB,IAACC,EAAa,OAAOD,EAAQxK,QAKjC,GAAIyK,EAAYzK,UAAYwK,EAAQxK,QAC9ByK,OAAAA,EAAYzK,QAAQoK,kBAAoBI,EAAQxK,QAC3CwK,EAAQxK,QACHwK,EAAQxK,QAAQoK,gBAKhCI,EAAUC,EAAYvF,eACtBuF,EAAcD,EAAUA,EAAQtF,eAAiB,IAClD,CACF,IAzKH,CAAA,CAAA5L,IAAA,UAAAN,MAGE,SAAe0R,GAGb,IAFMC,IAAAA,EAAW,GAERvN,EAAI,EAAGiC,EAAOqL,EAAYxM,OAAQd,EAAIiC,EAAMjC,IAAK,CACxD,IAAMsC,EAAUgL,EAAYtN,GACxB,GAACsC,EAAQO,eAAgBP,EAAQM,QAAjC,CAWJ,IATI4K,IAAAA,EAAY,KACZC,EAAQnL,EAAQkC,OAChBpB,EAAYd,EAAQmC,QAClB7C,EAAS,CAAC6L,GAEVC,EAAgBD,EAAM5T,MACtB8T,EAAkB,GAItBH,EAAYC,EACZA,EAAQrK,EACRxB,EAAOC,KAAK4L,GAGRA,EAAM5T,QAAU6T,GAEpB,OAAa,CACX,IAAME,EAAeH,EAAMI,2BAI3B,GAA4B,IAAxBD,EAAa9M,OAAc,CAC7B,IAAMgN,EAAUlM,EAAO,GAAG/H,MACpBkU,EAASnM,EAAOA,EAAOd,OAAS,GAAGjH,MACnC,MAAA,IAAIkI,MACR,+CAAA6H,OAA+CkE,EAAQ/T,kBACjD+T,EAAQ7T,EACP8T,0CAAAA,KAAAA,OAAAA,EAAOhU,EAFd,MAAA6P,OAEoBmE,EAAO9T,QAE9B,CAGD,GAA4B,IAAxB2T,EAAa9M,OAAc,CAC7BsC,EAAYwK,EAAa,GAAGlL,QAC5B,KACD,CAID,IADIsL,IAAAA,EAAU,KACLxL,EAAI,EAAGoJ,EAAO+B,EAAgB7M,OAAQ0B,EAAIoJ,EAAMpJ,IACnDmL,GAAAA,EAAgBnL,GAAG3I,QAAU4T,EAAM5T,MAAO,CAC5CmU,EAAUxL,EACV,KACD,CAGCwL,GAAY,OAAZA,EAAAA,CAQJL,EAAgB9L,KAAK,CACnB8F,MAAO/F,EAAOd,OACdjH,MAAO4T,EAAM5T,QAGf,IAAMoU,EAAaR,EAAMS,sBAAsBV,GAC/CpK,EAAYwK,EAAaO,KAAKF,GAAY,GAAGvL,QAC7C,KATC,CALO0L,IAAAA,EAAiBT,EAAgB/E,OAAOoF,GAAS,GACjDK,EAAazM,EAAOgH,OAAOwF,EAAezG,OAChD0G,EAAWC,QAAQD,EAAW,GAAG3L,SACjC6K,EAAS1L,KAAK,IAAIuK,EAAQiC,EAAWE,WAYxC,CAGHhB,EAAS1L,KAAK,IAAIuK,EAAQxK,GApEoB,CAqE/C,CACD,OAAO2L,CACR,KA/EHnB,CAAA,CAAA,GA4KaoC,EAAb,WACE,SAAAA,EAAYhD,GAAcrQ,EAAAC,KAAAoT,GACnBhD,KAAAA,aAAeA,EACpBA,EAAa9C,KAAOtN,KACfqQ,KAAAA,cAAgB,EACtB,CALH,OAAAL,EAAAoD,EAAA,CAAA,CAAAtS,IAAA,cAOEN,MAAA,SAAY6L,GACVrM,KAAKqQ,cAAc5J,KAAK4F,GACxBA,EAAKiB,KAAOtN,IACb,GAVH,CAAAc,IAAA,UAAAN,MAYE,WACQkQ,IAAAA,EAAO,CAAC1Q,KAAKoQ,aAAaiD,WAE5B3C,GAAY,OAAZA,EAAK,GAAa,OAAO,KAC7B,IAAK,IAAI9L,EAAI,EAAGiC,EAAO7G,KAAKqQ,cAAc3K,OAAQd,EAAIiC,EAAMjC,IAAK,CACzD0O,IAAAA,EAAWtT,KAAKqQ,cAAczL,GAAGyO,UAEtB,OAAbC,GACJ5C,EAAKjK,KAAK6M,EACX,CACD,OAAO5C,CACR,KAvBH0C,CAAA,CAAA,GA0BaG,EAAb,WACE,SAAAA,EAAYjK,GAAOvJ,EAAAC,KAAAuT,GACZjK,KAAAA,MAAQA,EACbtJ,KAAK4Q,MAAQ5Q,KAAKwT,cAAclK,EACjC,CAJH,OAAA0G,EAAAuD,EAAA,CAAA,CAAAzS,IAAA,UAAAN,MAME,WAEE,IADMkQ,IAAAA,EAAO,GACJ9L,EAAI,EAAGiC,EAAO7G,KAAK4Q,MAAMlL,OAAQd,EAAIiC,EAAMjC,IAAK,CACjD6O,IAAAA,EAAWzT,KAAK4Q,MAAMhM,GAAGyO,UAEd,OAAbI,GACJ/C,EAAKjK,KAAKgN,EACX,CACD,OAAO/C,CACR,GAfH,CAAA5P,IAAA,gBAiBEN,MAAA,SAAc8I,GAEZ,IADMsH,IAAAA,EAAQ,GACLhM,EAAI,EAAGiC,EAAOyC,EAAM5D,OAAQd,EAAIiC,EAAMjC,IAAK,CAClD,IAAMyH,EAAO/C,EAAM1E,GACfyH,IAAAA,EAAKiB,KACT,GAAIjB,EAAKiF,iBAAkBV,EAAMnK,KAAK,IAAI2M,EAAQ/G,QAC7C,CACH,IAAMuF,EAAgBvF,EAAKuF,gBACtBA,EAActE,MAAMsD,EAAMnK,KAAK,IAAI2M,EAAQxB,IAChDA,EAActE,KAAKoG,YAAYrH,EAChC,CACF,CACD,OAAOuE,CACR,KA9BH2C,CAAA,CAAA,GC1LqBI,aACnB,SAAAA,EAAYC,GAAqC,IAA9Bf,EAA8BgB,UAAAnO,OAAA,QAAApG,IAAAuU,UAAA,GAAAA,UAAA,GAAjB9K,EAAQC,QAASjJ,EAAAC,KAAA2T,GAC1CC,KAAAA,MAAQA,EACb5T,KAAKM,KAAO,IAAIC,EAAUsS,GACrBjD,KAAAA,SAAW,EACjB,4BAEDpP,MAAA,SAAQ6R,GACN,IAAMnL,EAAUmL,EAAMnL,QAChBuE,EAAY,GAId4G,GAAAA,EAAMlL,WAGR,OAFIkL,EAAM9L,OAAQvG,KAAK4T,MAAM7S,OAAOsR,EAAM/K,SACrCtH,KAAKM,KAAKS,OAAOmG,GACfuE,EAGH/K,IAAAA,EAAO2R,EAAM9L,OACfvG,KAAKM,KAAKwT,OAAO5M,GACjBlH,KAAKM,KAAKyT,KAAK7M,GAEf,IAACxG,EACH,MAAM,IAAIiG,MACR,kCAA2BO,EAAQsC,GAC7BtC,KAAAA,IAAAA,OAAAA,EAAQkC,OAAO3K,MAAME,eAAMuI,EAAQkC,OAAO3K,MAAMI,EADtD,SAAA,IAAA2P,OAEMtH,EAAQmC,QAAQ5K,MAAME,EAAMuI,MAAAA,OAAAA,EAAQmC,QAAQ5K,MAAMI,EACtD,MAAA,kDASCmT,IANHpR,IAAAA,EAAWF,EACXM,EAAWN,EACXsR,OAAU1S,EACV0U,OAAU1U,OAGKA,IAAZ0S,GAEY,QADjBpR,EAAWZ,KAAKM,KAAKO,KAAKD,IACHoR,EAAU,UACI1S,IAA5BsB,EAASE,IAAIqG,aAA0B6K,EAAUpR,EAASE,KAI9DkT,UAAY1U,IAAZ0U,GAEY,QADjBhT,EAAWhB,KAAKM,KAAKW,KAAKD,IACHgT,EAAU,UACI1U,IAA5B0B,EAASF,IAAIqG,aAA0B6M,EAAUhT,EAASF,KAGjEuR,GAAAA,EAAM9L,OAAQ,CAEZ0N,IAAAA,EAAiB,KACrB,GAAIjC,EAAS,CACX,IAAMkC,EAAYlC,EAAQmC,gBAAgBjN,GACtCgN,GAAc,OAAdA,IACGhN,EAAQ0C,aAAasK,KAAYD,EAAiBC,IAClDlC,EAAQpI,aAAasK,IAExB,IADME,IAAAA,EAAqBpU,KAAKqU,aAAarC,EAASkC,GAC7CtP,EAAI,EAAGiC,EAAOuN,EAAmB1O,OAAQd,EAAIiC,EAAMjC,IAC1D6G,EAAUhF,KAAK2N,EAAmBxP,GAV1B,CAiBZ0P,IAAAA,EAAiB,KACrB,GAAIN,EAAS,CACX,IAAMO,EAAYP,EAAQG,gBAAgBjN,GACtCqN,GAAc,OAAdA,IACGrN,EAAQ0C,aAAa2K,KAAYD,EAAiBC,IAClDP,EAAQpK,aAAa2K,IAExB,IADMH,IAAAA,EAAqBpU,KAAKqU,aAAaL,EAASO,GAC7C3P,EAAI,EAAGiC,EAAOuN,EAAmB1O,OAAQd,EAAIiC,EAAMjC,IAC1D6G,EAAUhF,KAAK2N,EAAmBxP,GAzB1B,CAkChB,GAAuB,OAAnBqP,GAA8C,OAAnBK,EAAyB,CAClDE,IAAAA,EAAa,KACjB,GAAuB,OAAnBP,EAAyBO,EAAaF,OACrC,GAAuB,OAAnBA,EAAyBE,EAAaP,MAC1C,CAKHO,EAJqBlO,EAAWuC,cAC9BoL,EACAK,IAE2B,EAAIL,EAAiBK,CATE,CActDtU,KAAK4T,MAAM7S,OAAOmG,EAAQmC,SAC1BoC,EAAUhF,KAAKS,EAAQmC,SAGvB,IADA,IAAM+K,EAAqBlN,EAAQuN,MAAMD,GAChC5P,EAAI,EAAGiC,EAAOuN,EAAmB1O,OAAQd,EAAIiC,EAAMjC,IAC1D6G,EAAUhF,KAAK2N,EAAmBxP,GAErC,CAEG6G,EAAU/F,OAAS,GAIrB1F,KAAKM,KAAKS,OAAOmG,GACjBuE,EAAUhF,KAAK4L,KAGfrS,KAAK4P,SAASnJ,KAAKS,GACnBA,EAAQrG,KAAOmR,EAElB,KAAM,CAKDA,GAAAA,GAAWgC,EAAS,CACtB,IAAMU,EAAQ1C,EAAQmC,gBAAgBH,GAClCU,GAAU,OAAVA,EAAgB,CAClB,IAAK1C,EAAQpI,aAAa8K,GAExB,IADMN,IAAAA,EAAqBpU,KAAKqU,aAAarC,EAAS0C,GAC7C9P,EAAI,EAAGiC,EAAOuN,EAAmB1O,OAAQd,EAAIiC,EAAMjC,IAC1D6G,EAAUhF,KAAK2N,EAAmBxP,IAGtC,IAAKoP,EAAQpK,aAAa8K,GAExB,IADMN,IAAAA,EAAqBpU,KAAKqU,aAAaL,EAASU,GAC7C9P,EAAI,EAAGiC,EAAOuN,EAAmB1O,OAAQd,EAAIiC,EAAMjC,IAC1D6G,EAAUhF,KAAK2N,EAAmBxP,GAGvC,CACF,CAED5E,KAAKM,KAAKS,OAAOmG,EAClB,CAED,OAAOuE,CACR,6BAID,SAAamB,EAAKxG,GAKhBpG,KAAKM,KAAKS,OAAO6L,GACjB,IAAMvD,EAAUuD,EAAIvD,QACpBrJ,KAAK4T,MAAM7S,OAAOsI,GAClB,IAAMoC,EAAYmB,EAAI6H,MAAMrO,GAI5B,OAHAqF,EAAUhF,KAAK4C,QAEQ/J,IAAnBsN,EAAIzF,YAA0BnH,KAAKM,KAAKwT,OAAOlH,GAC5CnB,CACR,UCxKGkJ,EACgB,oBAAZC,SACNA,QAAQC,IAAIF,iCACd,IACIG,EACgB,oBAAZF,SACNA,QAAQC,IAAIC,yCACd,IAiHIjH,EAAY,IA/GlB,WAAA,SAAAkH,IAAAhV,EAAAC,KAAA+U,EAAA,CAAA,OAAA/E,EAAA+E,EAAA,CAAA,CAAAjU,IAAA,MAAAN,MACE,SAAIsN,EAAM4C,EAAMsE,GACdnH,EAAUC,KAAOA,EACjB5M,EAAQjB,QAIR,IADA,IAAMgV,EAAa,CAAC,IAAIC,EAAmBxE,GAAM,IACxC9L,EAAI,EAAGiC,EAAOmO,EAAUtP,OAAQd,EAAIiC,EAAMjC,IACjDqQ,EAAWxO,KAAK,IAAIyO,EAAmBF,EAAUpQ,IAAI,IAQvD,GANAiJ,EAAUM,cAAgB8G,EAAWvP,OAMd,eAAnBmI,EAAUC,KAIZ,IAFA,IAAMqH,EAAUF,EAAW,GACvBrQ,EAAI,EACDA,EAAIqQ,EAAWvP,QACqC,OAArD5G,EAAemW,EAAWrQ,GAAGpG,KAAM2W,EAAQ3W,MAAgBoG,IAC1DqQ,EAAWzH,OAAO5I,EAAG,GAO9B,GAAuB,iBAAnBiJ,EAAUC,KAGZ,IAAK,IAAIlJ,EAAI,EAAGiC,EAAOoO,EAAWvP,OAAQd,EAAIiC,EAAMjC,IAElD,IADA,IAAMwQ,EAAMH,EAAWrQ,GACdwC,EAAIxC,EAAI,EAAG4L,EAAOyE,EAAWvP,OAAQ0B,EAAIoJ,EAAMpJ,IACtD,GAAqD,OAAjDtI,EAAesW,EAAI5W,KAAMyW,EAAW7N,GAAG5I,MAAgB,MAAO,GAOxE,IADMoV,IAAAA,EAAQ,IAAIrT,EAAU+F,EAAW0C,SAC9BpE,EAAI,EAAGiC,EAAOoO,EAAWvP,OAAQd,EAAIiC,EAAMjC,IAElD,IADMqL,IAAAA,EAAcgF,EAAWrQ,GAAG0L,iBACzBlJ,EAAI,EAAGoJ,EAAOP,EAAYvK,OAAQ0B,EAAIoJ,EAAMpJ,IAGnD,GAFAwM,EAAME,OAAO7D,EAAY7I,IAErBwM,EAAMyB,KAAOV,EAEf,MAAM,IAAIhO,MACR,oHAWR,IAHA,IAAM2O,EAAY,IAAI3B,EAAUC,GAC5B2B,EAAgB3B,EAAMyB,KACtB3U,EAAOkT,EAAM4B,MACV9U,GAAM,CACX,IAAMoG,EAAMpG,EAAKI,IACjB,GAAI8S,EAAMyB,OAASE,EAAe,CAEhC,IAAM3I,EAAM9F,EAAII,QAChB,MAAM,IAAIP,MACR,mBAAA6H,OAAmB1H,EAAIP,OAAS,OAAS,QAAzC,gBAAA,IAAAiI,OACM1H,EAAIrI,MAAME,EADhB,MAAA6P,OACsB1H,EAAIrI,MAAMI,EADhC,oBAAA2P,OACoD5B,EAAIpD,GADxD,KAAA,IAAAgF,OAEM5B,EAAIxD,OAAO3K,MAAME,EAFvB,MAAA6P,OAE6B5B,EAAIxD,OAAO3K,MAAMI,EAF9C,SAAA,IAAA2P,OAGM5B,EAAIvD,QAAQ5K,MAAME,EAHxB,MAAA6P,OAG8B5B,EAAIvD,QAAQ5K,MAAMI,EAHhD,kBAIE,4BAEL,CAED,GAAI+U,EAAMyB,KAAOV,EAEf,MAAM,IAAIhO,MACR,wGAKJ,GAAI2O,EAAU1F,SAASlK,OAASoP,EAE9B,MAAM,IAAInO,MACR,kHAMJ,IADA,IAAM8E,EAAY6J,EAAUV,QAAQ9N,GAC3BlC,EAAI,EAAGiC,EAAO4E,EAAU/F,OAAQd,EAAIiC,EAAMjC,IAAK,CACtD,IAAMkC,EAAM2E,EAAU7G,QACCtF,IAAnBwH,EAAIK,YAA0ByM,EAAME,OAAOhN,EAChD,CACDyO,EAAgB3B,EAAMyB,KACtB3U,EAAOkT,EAAM4B,KAhGU,CAoGzBtU,EAAQjB,QAGFkS,IAAAA,EAAWsD,EAAgBC,QAAQJ,EAAU1F,UAE5C+F,OADQ,IAAIF,EAAqBtD,GAC1BkB,SACf,KA3GH0B,CAAA,CAAA,ICNexI,EAAA,CACbqJ,MAXY,SAAClF,GAAD,IAAA,IAAAmF,EAAAhC,UAAAnO,OAAUsP,EAAV,IAAAtF,MAAAmG,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAUd,EAAVc,EAAA,GAAAjC,UAAAiC,GAAwBjI,OAAAA,EAAUkI,IAAI,QAASrF,EAAMsE,EAArD,EAYZxJ,aAVmB,SAACkF,GAAD,IAAA,IAAAsF,EAAAnC,UAAAnO,OAAUsP,EAAV,IAAAtF,MAAAsG,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAUjB,EAAViB,EAAA,GAAApC,UAAAoC,GACnBpI,OAAAA,EAAUkI,IAAI,eAAgBrF,EAAMsE,EADjB,EAWnBkB,IARU,SAACxF,GAAD,IAAA,IAAAyF,EAAAtC,UAAAnO,OAAUsP,EAAV,IAAAtF,MAAAyG,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAUpB,EAAVoB,EAAA,GAAAvC,UAAAuC,GAAwBvI,OAAAA,EAAUkI,IAAI,MAAOrF,EAAMsE,EAAnD,EASVqB,WAPiB,SAACC,GAAD,IAAA,IAAAC,EAAA1C,UAAAnO,OAAiB8Q,EAAjB,IAAA9G,MAAA6G,EAAA,EAAAA,EAAA,EAAA,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAiBD,EAAjBC,EAAA,GAAA5C,UAAA4C,GACjB5I,OAAAA,EAAUkI,IAAI,aAAcO,EAAaE,EADxB"}